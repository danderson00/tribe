suite('tribe.storage.sqlite3.queries', function () {
    var queries = require('tribe.storage/sqlite3/queries');

    test("store with no indexes", function () {
        var envelope = { id: 1, topic: 'test' },
            query = queries.store({ name: 'messages' }, envelope);
        expect(query.sql).to.equal("insert into messages values (?)");
        expect(query.parameters).to.deep.equal([JSON.stringify(envelope)]);
    });

    test("store with single index", function () {
        var envelope = { id: 1, topic: 'test', value1: 1 },
            query = queries.store({ name: 'messages', indexes: ['value1'] }, envelope);

            expect(query.sql).to.equal("insert into messages values (?)");
            expect(query.parameters).to.deep.equal([JSON.stringify(envelope)]);
    });

    test("store with multiple indexes", function () {
        var envelope = { id: 1, topic: 'test', value1: 1, value2: 2 },
            query = queries.store({ name: 'messages', indexes: ['value1', 'value2'] }, envelope);
        expect(query.sql).to.equal("insert into messages values (?)");
        expect(query.parameters).to.deep.equal([JSON.stringify(envelope)]);
    });

    test("insertIndexes with single index", function () {
        var envelope = { id: 1, topic: 'test', value1: 1 },
            query = queries.insertIndexes({ name: 'messages', indexes: ['value1'] }, envelope, 1);

        expect(query.length).to.equal(1);
        expect(query[0].sql).to.equal("insert into messages_value1 (id, value) values (?, ?)");
        expect(query[0].parameters).to.deep.equal([1, 1]);
    });
    test("insertIndexes with multiple indexes", function () {
        var envelope = { id: 1, topic: 'test', value1: 1, value2: 2 },
            query = queries.insertIndexes({ name: 'messages', indexes: ['value1', 'value2'] }, envelope, 1);

        expect(query.length).to.equal(2);
        expect(query[0].sql).to.equal("insert into messages_value1 (id, value) values (?, ?)");
        expect(query[0].parameters).to.deep.equal([1, 1]);
        expect(query[1].sql).to.equal("insert into messages_value2 (id, value) values (?, ?)");
        expect(query[1].parameters).to.deep.equal([1, 2]);
    });

    test("retrieve with index", function () {
        var query = queries.retrieve({ name: 'messages' }, { p: 'testId', v: 1 });
        expect(query.sql).to.equal('SELECT messages.rowid as __rowid, messages.* FROM messages INNER JOIN messages_testId ON messages.rowid = messages_testId.id WHERE messages_testId.value = ? ORDER BY messages_testId.value');
        expect(query.parameters).to.deep.equal([1]);
    });

    test("retrieve with array indexValue", function () {
        var query = queries.retrieve({ name: 'messages' }, { p: 'testId', v: [1, 2] });
        expect(query.sql).to.equal('SELECT messages.rowid as __rowid, messages.* FROM messages INNER JOIN messages_testId ON messages.rowid = messages_testId.id WHERE messages_testId.value IN (?,?) ORDER BY messages_testId.value');
        expect(query.parameters).to.deep.equal([1, 2]);
    });

    test("retrieve with multiple indexes", function () {
        var query = queries.retrieve({ name: 'messages' }, [{ p: 'testId', v: 1 }, { p: 'id', o: '>=', v: 10 }]);
        expect(query.sql).to.equal('SELECT messages.rowid as __rowid, messages.* FROM messages INNER JOIN messages_testId ON messages.rowid = messages_testId.id INNER JOIN messages_id ON messages.rowid = messages_id.id WHERE messages_testId.value = ? AND messages_id.value >= ? ORDER BY messages_testId.value,messages_id.value');
        expect(query.parameters).to.deep.equal([1, 10]);
    });
});


/*
update messages set content = ? where id = ?;insert or ignore into messages (content,id) values (?,?)
update messages set content = ? where id = ?;insert or ignore into messages (content,id) values (?,?)

*/
