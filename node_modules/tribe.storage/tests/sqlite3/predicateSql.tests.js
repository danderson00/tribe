suite('tribe.storage.sqlite3.predicateSql', function () {
    var predicates = require('tribe.storage/sqlite3/predicateSql');

    test("toSql generates query for keyPath", function () {
        var query = predicates.toSql({ name: 't', keyPath: 'id' }, { o: '=', p: 'id', v: 1 });
        expect(query.sql).to.equal(' WHERE t.rowid = ? ORDER BY t.rowid');
        expect(query.parameters).to.deep.equal([1]);
    });

    test("toSql generates query for single predicate", function () {
        var query = predicates.toSql({ name: 't' }, { o: '=', p: 'p1.p2', v: 'te"st' });
        expect(query.sql).to.equal(' INNER JOIN t_p1_p2 ON t.rowid = t_p1_p2.id WHERE t_p1_p2.value = ? ORDER BY t_p1_p2.value');
        expect(query.parameters).to.deep.equal(['te"st']);
    });

    test("toSql defaults to equal operator", function () {
        var query = predicates.toSql({ name: 't' }, { p: 'p1.p2', v: 'te"st' });
        expect(query.sql).to.equal(' INNER JOIN t_p1_p2 ON t.rowid = t_p1_p2.id WHERE t_p1_p2.value = ? ORDER BY t_p1_p2.value');
        expect(query.parameters).to.deep.equal(['te"st']);
    });

    test("toSql converts = to IN if value is array", function () {
        var query = predicates.toSql({ name: 't' }, { p: 'p1.p2', v: [1, 2] });
        expect(query.sql).to.equal(' INNER JOIN t_p1_p2 ON t.rowid = t_p1_p2.id WHERE t_p1_p2.value IN (?,?) ORDER BY t_p1_p2.value');
        expect(query.parameters).to.deep.equal([1, 2]);
    });

    test("toSql generates query for keyPath and index predicates", function () {
        var query = predicates.toSql({ name: 't', keyPath: 'id' }, [{ o: '=', p: 'id', v: 1 }, { o: '=', p: 'p1.p2', v: 'te"st' }]);
        expect(query.sql).to.equal(' INNER JOIN t_p1_p2 ON t.rowid = t_p1_p2.id WHERE t.rowid = ? AND t_p1_p2.value = ? ORDER BY t.rowid,t_p1_p2.value');
        expect(query.parameters).to.deep.equal([1, 'te"st']);
    });

    test("toSql generates query for multiple index predicates", function () {
        var query = predicates.toSql({ name: 't' }, [
            { o: '=', p: 'p1.p2', v: 'test' },
            { o: '>', p: 'p3.p4', v: 10 }
        ]);
        expect(query.sql).to.equal(' INNER JOIN t_p1_p2 ON t.rowid = t_p1_p2.id INNER JOIN t_p3_p4 ON t.rowid = t_p3_p4.id WHERE t_p1_p2.value = ? AND t_p3_p4.value > ? ORDER BY t_p1_p2.value,t_p3_p4.value');
        expect(query.parameters).to.deep.equal(['test', 10]);
    });

    test("toSql generates list for array predicates", function () {
        var query = predicates.toSql({ name: 't' }, { o: 'in', p: 'p1.p2', v: ['v1', 'v2', 'v3'] });
        expect(query.sql).to.equal(' INNER JOIN t_p1_p2 ON t.rowid = t_p1_p2.id WHERE t_p1_p2.value IN (?,?,?) ORDER BY t_p1_p2.value');
        expect(query.parameters).to.deep.equal(['v1', 'v2', 'v3']);
    });

    test("toSql generates is null for undefined values", function () {
        var query = predicates.toSql({ name: 't' }, [
            { o: '=', p: 'p1.p2' },
            { o: 'in', p: 'p3.p4', v: ['v1', null] }
        ]);
        expect(query.sql).to.equal(' INNER JOIN t_p1_p2 ON t.rowid = t_p1_p2.id INNER JOIN t_p3_p4 ON t.rowid = t_p3_p4.id WHERE t_p1_p2.value IS ? AND t_p3_p4.value IN (?,?) ORDER BY t_p1_p2.value,t_p3_p4.value');
        expect(query.parameters).to.deep.equal([undefined, 'v1', null]);
    });
});
/*
 INNER JOIN t_p1_p2 ON t.rowid = t_p1_p2.id INNER JOIN t_p3_p4 ON t.rowid = t_p3_p4.id WHERE t_p1_p2.value = ? AND t_p3_p4.value > ? ORDER BY t_p1_p2.value,t_p3_p4.value
 INNER JOIN t_p1_p2 ON t.rowid = t_p1_p2.id INNER JOIN t_p3_p4 ON t.rowid = t_p3_p4.id WHERE t_p1_p2.value = ? AND t_p3_p4.value > ? ORDER BY t_p1_p2.value,t_p3_p4.value

 INNER JOIN t_p1_p2 ON t.rowid = t_p1_p2.id INNER JOIN t_p3_p4 ON t.rowid = t_p3_p4.id WHERE t_p1_p2.value IS ? AND t_p3_p4.value IN (?,?) ORDER BY t_p1_p2.value,t_p3_p4.value
 INNER JOIN t_p1_p2 ON t.rowid = t_p1_p2.id INNER JOIN t_p3_p4 ON t.rowid = t_p3_p4.id WHERE t_p1_p2.value IS ? AND t_p3_p4.value IN (?,?) ORDER BY t_p1_p2.value,t_p3_p4.value
*/
