var Q = require('q'),
    _ = require('underscore');

module.exports = function (entity, database) {
    var indexes = _.unique(_.flatten(entity.indexes)),
        existingTables;

    return loadTableData()
        .then(createTable)
        .then(createIndexTables);

    function loadTableData(name) {
        return database.all("select name from sqlite_master where type='table' and name like '" + entity.name + "%'")
            .then(function (rows) {
                existingTables = _.pluck(rows, 'name');
            });
    }

    function createTable() {
        if (existingTables.indexOf(entity.name) === -1) {
            var keyColumn = indexName(entity.keyPath) || "__key",
                autoIncrement = (entity.autoIncrement || !entity.keyPath) ? "autoincrement" : "";
            return database.run("create table " + entity.name + " (" + keyColumn + " integer primary key " + autoIncrement + ", __content text)");
        }
    }

    function createIndexTables() {
        return _.reduce(indexes, function (promise, index) {
            return promise.then(createIndexTable(index));
        }, Q());

        function createIndexTable(index) {
            return function () {
                if (!indexTableExists()) {
                    return Q(createIndexTable()).then(createIndex);
                }

                function indexTableExists() {
                    return existingTables.indexOf(indexTableName()) > -1;
                }

                function createIndexTable() {
                    return database.run("create table " + indexTableName() + " (id integer, value text)");
                }

                function createIndex() {
                    return database.run("create index " + indexTableName() + "__index on " + indexTableName() + " (value)");
                }

                function indexTableName() {
                    return entity.name + '_' + indexName(index);
                }
            };
        }
    }

    function indexName(index) {
        if (!index) return '';
        if (index.constructor === Array)
            return _.map(index, indexName).join('__');
        return index.replace(/\./g, '_');
    }

};
