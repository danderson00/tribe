var _ = require('underscore');

//var predicate = {
//    p: 'path',      // path:        'path.to.property'
//    o: '=',         // operator:    '=', '!=', '>', '>=', '<', '<=', 'in'
//    v: 'value'      // value:       123, 'string', [1, 2, 3]
//};

module.exports = {
    toSql: function (entity, predicates) {
        return {
            sql: sql(),
            parameters: parameters()
        }

        function sql() {
            if (!predicates) return '';

            if (predicates.constructor === Array) {
                if (predicates.length > 0)
                    return _.map(predicates, indexJoin).join('') + ' WHERE ' + _.map(predicates, where).join(' AND ') + orderBy();
                else
                    return '';
            } else {
                  return indexJoin(predicates) + ' WHERE ' + where(predicates) + orderBy();
              }
        }

        function parameters() {
            if (predicates.constructor === Array)
                return _.flatten(_.pluck(predicates, 'v'));
            return _.flatten([predicates.v]);
        }

        function orderBy() {
            if (predicates.constructor === Array)
                return ' ORDER BY ' + _.map(predicates, columnName).join(',');
            return ' ORDER BY ' + columnName(predicates);
        }

        function indexJoin(predicate) {
            if(predicate.p !== entity.keyPath) {
                var tableKey = safeName(entity.name) + '.rowid',
                    indexKey = indexTableName(predicate) + '.id';

                return ' INNER JOIN ' + indexTableName(predicate) + ' ON ' + tableKey + ' = ' + indexKey;
            } else {
                return '';
            }
        }

        function where(predicate) {
            predicate.o = predicate.o || '=';
            return columnName(predicate) + ' ' + sqlOperator(predicate) + ' ' + parameterList(predicate.v);
        }

        function sqlOperator(predicate) {
            if (predicate.o === '=' && (predicate.v === undefined || predicate.v === null))
                return 'IS';
            if (predicate.o === '=' && predicate.v && predicate.v.constructor === Array)
                return 'IN';
            return predicate.o.toUpperCase();
        }

        function parameterList(value) {
            if (value && value.constructor === Array)
                return '(' + new Array(value.length + 1).join(',?').substring(1) + ')';
            return '?';
        }

        function indexTableName(predicate) {
            return safeName(entity.name + '_' + predicate.p);
        }

        function columnName(predicate) {
            return predicate.p === entity.keyPath
                ? safeName(entity.name) + '.rowid'
                : indexTableName(predicate) + '.value'
        }

        function safeName(name) {
            return name.replace(/\./g, '_');
        }
    }
}
