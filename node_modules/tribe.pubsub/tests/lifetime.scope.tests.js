suite('tribe.pubsub.lifetime.scope', function () {
    var pubsubModule = require('../pubsub'),
        pubsub;

    setup(function () {
        pubsub = new pubsubModule({ sync: true, handleExceptions: false });
    });

    test("lifetime applies scope to published envelopes", function () {
        var lifetime = pubsub.createLifetime({ p1: 'test', p2: 2 });
        lifetime.subscribe('test', function (data, envelope) {
            expect(envelope.data.p1).to.equal('test');
            expect(envelope.data.p2).to.equal(2);
        });
        lifetime.publishSync('test')
    });

    test("lifetime scope is cumulative", function () {
        var lifetime = pubsub
            .createLifetime({ p1: 'test' })
            .createLifetime({ p2: 2 });

        expect(lifetime.scope).to.deep.equal({ p1: 'test', p2: 2 });
        lifetime.subscribe('test', function (data, envelope) {
            expect(envelope.data.p1).to.equal('test');
            expect(envelope.data.p2).to.equal(2);
        });
        lifetime.publishSync('test')
    });

    test("scope does not override explicitly specified values", function () {
        var lifetime = pubsub.createLifetime({ p1: 'test', p2: 2 }),
            spy = sinon.spy();
        lifetime.subscribe('test', spy);
        lifetime.publishSync('test');
        lifetime.publishSync('test', { p1: 'test2' });
        expect(spy.callCount).to.equal(1);
    });

    test("lifetime combines subscribe expression with scope", function () {
        var lifetime = pubsub.createLifetime({ id: 'test' }),
            spy = sinon.spy();

        lifetime.subscribe('topic', spy, { p: 'data.id2', v: 'test2' });
        lifetime.publishSync('topic', { id: 'test' });
        lifetime.publishSync('topic', { id: 'test', id2: 'test' });
        lifetime.publishSync('topic', { id: 'test', id2: 'test2' });
        lifetime.publishSync('topic', { id: 'test2', id2: 'test2' });
        expect(spy.callCount).to.equal(1);
    });

    test("scope with topic member matches envelope topic", function () {
        var lifetime = pubsub.createLifetime({ id: 'test', topic: 'topic1' }),
            spy = sinon.spy();

        lifetime.subscribe('*', spy);
        lifetime.publishSync('topic1', { id: 'test' });
        lifetime.publishSync('topic1', { id: 'test', id2: 'test' });
        lifetime.publishSync('topic2', { id: 'test', id2: 'test2' });
        lifetime.publishSync('topic1', { id: 'test2', id2: 'test2' });
        expect(spy.callCount).to.equal(2);
    });
})
