suite('tribe.pubsub.facet.scope', function () {
    var pubsubModule = require('../pubsub'),
        facetModule = require('../facet'),

        pubsub, spy1, spy2;

    setup(function () {
        pubsub = new pubsubModule({ sync: true, handleExceptions: false });
        spy1 = sinon.spy();
        spy2 = sinon.spy();
    });

    test("facet only handles messages with provided scope", function () {
        var facet1 = new facetModule(pubsub, ffacety(spy1), { test: 1 }),
            facet2 = new facetModule(pubsub, ffacety(spy2), { test: 2 });

        function ffacety(handler) {
            return function(facet) {
                facet.handles({ 'testTopic': handler })
            };
        }

        facet1.start();
        facet2.start();

        pubsub.publish('testTopic', { test: 1 });
        assertCounts(1, 0);

        pubsub.publish('testTopic', { test: 2 });
        assertCounts(1, 1);

        pubsub.publish('testTopic', { test: 3 });
        assertCounts(1, 1);
    });

    test("scope can be specified in object form", function () {
        var facet = new facetModule(pubsub, { pubsub: pubsub, handles: { 'testTopic': spy1 } }, { test: 1 });

        facet.isScopedTo('test');
        facet.start();

        pubsub.publish('testTopic', { test: 1 });
        pubsub.publish('testTopic', { test: 2 });
        assertCounts(1, 0);
    });

    test("multiple key paths can be specified in scope", function () {
        var facet1 = new facetModule(pubsub, { pubsub: pubsub, handles: { 'testTopic': spy1 } }, { 'p1': 1, 'p2': 2, 'p3': 3 }),
            facet2 = new facetModule(pubsub, { pubsub: pubsub, handles: { 'testTopic': spy2 } }, { 'p1': 1, 'p4.p5':  45 });

        facet1.isScopedTo('p1', 'p2', 'p3');
        facet1.start();
        facet2.isScopedTo('p1', 'p4.p5');
        facet2.start();

        pubsub.publish('testTopic', { p1: 1, p2: 2, p3: 3, p4: { p5: 45 } });
        assertCounts(1, 1);

        pubsub.publish('testTopic', { p1: 2, p2: 2, p3: 3, p4: { p5: 45 } });
        assertCounts(1, 1);

        pubsub.publish('testTopic', { p1: 1, p2: 2, p3: 3 });
        assertCounts(2, 1);

        pubsub.publish('testTopic', { p1: 1, p2: 2, p3: 4, p4: { p5: 45 } });
        assertCounts(2, 2);
    });

    function assertCounts(one, two) {
        assert.equal(spy1.callCount, one);
        assert.equal(spy2.callCount, two);
    }
});
