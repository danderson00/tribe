suite('tribe.pubsub.filters.property', function () {
    var filter = require('../filters/property');

    test("get returns empty array when no handlers have been registered", function () {
        var list = filter();
        expect(list.get({ data: {} }).length).to.equal(0);
    });

    test("get returns handlers where specified property matches", function () {
        var list = filter();
        list.add(1, 1, { property: 'data.test', value: 1 });
        list.add(2, 2, { property: 'data.test', value: 1 });
        list.add(3, 3, { property: 'data.test', value: 2 });
        list.add(4, 4, { property: 'data.test2', value: 1 });

        expect(list.get({ data: { test: 1 } })).to.deep.equal([1, 2]);
        expect(list.get({ data: { test: 2 } })).to.deep.equal([3]);
        expect(list.get({ data: { test2: 1 } })).to.deep.equal([4]);
        expect(list.get({ data: { test: 1, test2: 1 } })).to.deep.equal([1, 2, 4]);
    });

    test("get does not return removed handlers", function () {
        var list = filter();

        list.add(1, 1, { property: 'data.test', value: 1 });
        list.add(2, 2, { property: 'data.test', value: 1 });
        expect(list.get({ data: { test: 1 } })).to.deep.equal([1, 2]);

        list.remove(1);
        list.remove(3);
        expect(list.get({ data: { test: 1 } })).to.deep.equal([2]);

        list.remove(2);
        expect(list.get({ data: { test: 1 } })).to.deep.equal([]);
    });
});