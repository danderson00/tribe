suite('tribe.pubsub.actor.publish', function () {
    var pubsubModule = require('../pubsub'),
        actorModule = require('../actor');

    test("actor does not publish messages when origin is server or replay", function () {
        var spy = sinon.spy(),
            pubsub = new pubsubModule({ sync: true, handleExceptions: false }),
            actor = new actorModule(pubsub, constructor);

        function constructor(actor) {
            actor.handles('trigger', function () {
                actor.publish('fires');
            });
        }

        pubsub.subscribe('fires', spy);
        actor.start();

        pubsub.publish({ topic: 'trigger', origin: 'server' });
        expect(spy.callCount).to.equal(0);

        actor.replay([{ topic: 'trigger' }]);
        expect(spy.callCount).to.equal(0);

        pubsub.publish({ topic: 'trigger' });
        expect(spy.callCount).to.equal(1);
    });

    test("actor does not publish messages when message is silent", function () {
        var spy = sinon.spy(),
            pubsub = new pubsubModule({ sync: true, handleExceptions: false }),
            actor = new actorModule(pubsub, constructor);

        function constructor(actor) {
            actor.handles('trigger', function () {
                actor.publish('fires');
            });
        }

        pubsub.subscribe('fires', spy);
        actor.start();
        pubsub.publish({ topic: 'trigger' });
        pubsub.publish({ topic: 'trigger', silent: true });
        expect(spy.callCount).to.equal(1);
    });
});
