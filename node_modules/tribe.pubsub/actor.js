var addHandler = require('./actor.addHandler'),
    utils = require('./utils');

var actor = module.exports = function (pubsub, definition, id) {
    var self = this;

    pubsub = pubsub.createLifetime();
    this.pubsub = pubsub;
    this.children = [];
    this.id = id;
    this.metadata = {};

    configureActor();
    this.handles = this.handles || {};
    this.topics = utils.keys(this.handles);

    function configureActor() {
        if (definition)
            if (definition.constructor === Function)
                self.instance = new definition(self);
            else
                utils.copyProperties(definition, self, ['handles', 'endsChildrenExplicitly', 'onstart', 'onresume', 'onsuspend', 'onend']);
    }
};

actor.prototype.start = function (startData) {
    if (this.onstart) this.onstart(startData, this);
    utils.each(this.handles, this.addHandler, this);
    return this;
};

actor.prototype.startChild = function (child, onstartData) {
    this.children.push(new actor(this.pubsub, child)
        .start(onstartData));
    return this;
};

actor.prototype.resume = function (data, resumeData) {
    this.data = data;
    if (this.onresume) this.onresume(resumeData, this);
    utils.each(this.handles, this.addHandler, this);
    return this;
};

actor.prototype.suspend = function (suspendData) {
    if (this.onsuspend) this.onsuspend(suspendData, this);
    this.pubsub.end();
    this.suspendChildren(suspendData);
    return this;
};

actor.prototype.end = function (endData) {
    if (this.onend) this.onend(endData, this);
    this.pubsub.end();
    this.endChildren(endData);
    return this;
};

actor.prototype.endChildren = function (data) {
    utils.each(this.children, function (child) {
        child.end(data);
    });
};
    
actor.prototype.suspendChildren = function (data) {
    utils.each(this.children, function (child) {
        child.suspend(data);
    });
};

actor.prototype.mapsMessagePropertyToId = function (property) {
    this.metadata.messageFilter = {
        name: 'property',
        options: { property: 'data.' + property, value: this.id }
    };
};

actor.prototype.addHandler = addHandler;