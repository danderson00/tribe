module.exports = function (handler, topic) {
    var self = this;

    if (!handler)
        this.pubsub.subscribe(topic, endHandler());
    else if (handler.constructor === Function || handler.constructor === Array)
        this.pubsub.subscribe(topic, messageHandlerFor(handler));
    else
        this.pubsub.subscribe(topic, childHandlerFor(handler));

    function messageHandlerFor(handler) {
        return function (messageData, envelope) {
            self.handlerContext = { trigger: envelope };

            if (!self.endsChildrenExplicitly)
                self.endChildren(messageData);

            if (self.beforeMessage) self.beforeMessage(envelope);

            if(handler.constructor === Array)
                handler.forEach(function (func) {
                    func(messageData, envelope, self);
                })
            else
                handler(messageData, envelope, self);

            if (self.afterMessage) self.afterMessage(envelope);

            self.handlerContext = {};
        };
    }

    // deprecated
    function childHandlerFor(childHandlers) {
        return function (messageData, envelope) {
            self.startChild({ handles: childHandlers }, messageData);
        };
    }

    // deprecated
    function endHandler() {
        return function (messageData) {
            self.end(messageData);
        };
    }
};
