var Rx = require('rx')

Rx.Observable.prototype.count = function (predicate, initialValue) {
    return createObservable(this, initialValue || 0, function () {
        var count = initialValue || 0

        return function (value) {
            if(!predicate || predicate.apply(this, arguments))
                return ++count
        }
    })
}

Rx.Observable.prototype.sum = function (predicate, initialValue) {
    return createObservable(this, initialValue || 0, function () {
        var sum = initialValue || 0

        return function (value) {
            var valueToAdd = predicate ? predicate.apply(this, arguments) : value
            if(valueToAdd)
                return sum += valueToAdd
        }
    })
}

// ['average'].forEach(patchObservable)
patchObservable('average')

function patchObservable(name) {
    Rx.Observable.prototype[name] = function (predicate) {
        return createObservable(this)
    } 
}

function createObservable(source, initialValue, valueResolverFactory) {
    return Rx.Observable.create(function (observer) {
        var valueResolver = valueResolverFactory()

        source.subscribe(
            function (value) {
                var nextValue = valueResolver ? valueResolver.apply(this, arguments) : value
                if(nextValue)
                    observer.onNext(nextValue)
            },
            function () { observer.onError.apply(observer, arguments) },
            function () { observer.onCompleted.apply(observer, arguments) }
        )

        if(initialValue !== undefined)
            observer.onNext(initialValue)
    })
}
