var Rx = require('rx')

Rx.Observable.prototype.asArray = function() {
    var result = ko.observableArray()
    this.subscribe(function (value) {
        result.push(value)
    })
    return result
}

Rx.Observable.prototype.asScalar = function() {
    var result = ko.observable()
    this.subscribe(function (value) {
        result(value)
    })
    return result
}

Rx.Observable.prototype.when = function (predicate) {
    var observable = this

    var api = {
        then: function (action) {
            observable.subscribe(function (value) {
                if((predicate.constructor === Function && predicate(value)) || predicate === value)
                    action(value);
            })

            return {
                when: function (predicate) {
                    return observable.when.apply(observable, arguments)
                }
            }
        },
        select: function (selector) {
            var result = ko.observable()

            observable.subscribe(function (value) {
                if((predicate.constructor === Function && predicate(value)) || predicate === value)
                    result(selector ? selector(value) : value)
            })

            return result
        }
    }
    return api
}

Rx.Observable.prototype.range = function () {
    var self = this;

    return Rx.Observable.create(function (observer) {
        var values = []

        self.subscribe(function (group) {
            var index = values.length
            values.push()

            group.subscribe(function (value) {
                values[index] = value

                var min = Math.min.apply(undefined, values),
                    max = Math.max.apply(undefined, values)

                observer.onNext(max - min)
            })
        })
    })
}
