var Rx = require('rx')
require('../../Observable/overrides')

suite('tribe.rx.Observable.overrides', function () {
    var source;

    setup(function () {
        source = new Rx.Subject()
    })

    test("count with no predicate", function () {
        testObservable(source.count(), [undefined, undefined], [0, 1, 2])
    })

    test("count with predicate", function () {
        testObservable(source.count(function (x) {
            return x > 3
        }), [4, 2, 5], [0, 1, 2])
    })

    test("sum with no predicate", function () {
        testObservable(source.sum(), [2, 0, 3], [0, 2, 5])
    })

    test("sum with predicate", function () {
        testObservable(source.sum(function (x) { return x.value }), [{ value: 2 }, { value: 3 }], [0, 2, 5])
    })

    test("average with no predicate", function () {
        testObservable(source.average(), [1, 2, 3], [1, 1.5, 2])
    })

    test("average with predicate", function () {
        testObservable(source.average(function (x) { return x.value }), [{ value: 1 }, { value: 2 }, { value: 3 }], [1, 1.5, 2])
    })

    function testObservable(observable, values, expectedValues) {
        var spy = sinon.spy()

        observable.subscribe(spy)
        values.forEach(function (value) {
            source.onNext(value)
        })
        expectedValues.forEach(function (value, index) {
            expect(spy.getCall(index).args[0]).to.equal(value)
        })
    }
})
