var Rx = require('rx')
require('../../Observable/extensions')

suite('tribe.rx.Observable.extensions.groupByEach', function () {
    test("creates individual groups for each array value", function () {
        var source = new Rx.Subject(),
            observable = source.groupByEach(x => x.p1),
            spy = sinon.spy()

        observable.subscribe(spy)
        source.onNext({ p1: [1, 2] })
        source.onNext({ p1: [1, 3] })
        source.onNext({ p1: [2, 3] })
        expect(spy.firstCall.args[0].key).to.equal(1)
        expect(spy.secondCall.args[0].key).to.equal(2)
        expect(spy.thirdCall.args[0].key).to.equal(3)
    })

    test("handles individual values", function () {
        var source = new Rx.Subject(),
            observable = source.groupByEach(x => x.p1),
            spy = sinon.spy()

        observable.subscribe(spy)
        source.onNext({ p1: [1, 2] })
        source.onNext({ p1: 3 })
        source.onNext({ p1: [2, 3] })
        expect(spy.firstCall.args[0].key).to.equal(1)
        expect(spy.secondCall.args[0].key).to.equal(2)
        expect(spy.thirdCall.args[0].key).to.equal(3)
    })

    test("creates publishes messages to each matching group", function () {
        var source = new Rx.Subject(),
            group = source.groupByEach(x => x.p1),
            spies = []

        group.subscribe(function (observable) {
            var spy = sinon.spy()
            spies.push(spy)
            observable.subscribe(spy)
        })

        source.onNext({ p1: [1, 2] })
        source.onNext({ p1: 1 })
        source.onNext({ p1: [2, 3] })

        expect(spies[0].callCount).to.equal(2)
        expect(spies[1].callCount).to.equal(2)
        expect(spies[2].callCount).to.equal(1)
    })
});
