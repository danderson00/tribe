var Rx = require('rx')
require('../../Observable/extensions')

suite('tribe.rx.Observable.extensions.when', function () {
    test("when executes then action when value matches value predicate", function () {
        var source = new Rx.Subject(),
            spy = sinon.spy()

        source.when(2).then(spy)
        source.onNext(1)
        source.onNext(2)
        source.onNext(3)
        source.onNext(2)

        expect(spy.callCount).to.equal(2)
        expect(spy.firstCall.args[0]).to.equal(2)
        expect(spy.secondCall.args[0]).to.equal(2)
    })

    test("when executes then action when function predicate evaluates to true", function () {
        var source = new Rx.Subject(),
            spy = sinon.spy()

        source.when(function (x) { return x == 2 }).then(spy)
        source.onNext(1)
        source.onNext(2)
        source.onNext(3)
        source.onNext(2)

        expect(spy.callCount).to.equal(2)
        expect(spy.firstCall.args[0]).to.equal(2)
        expect(spy.secondCall.args[0]).to.equal(2)
    })

    test("when calls can be chained", function () {
        var source = new Rx.Subject(),
            spy1 = sinon.spy(),
            spy2 = sinon.spy()

        source.when(2).then(spy1).when(3).then(spy2)
        source.onNext(1)
        source.onNext(2)
        source.onNext(3)
        source.onNext(2)

        expect(spy1.callCount).to.equal(2)
        expect(spy2.callCount).to.equal(1)
    })

    test("when calls against predicate can be chained", function () {
        var source = new Rx.Subject(),
            spy1 = sinon.spy(),
            spy2 = sinon.spy()

        source.count().when(1).then(spy1).when(2).then(spy2)

        source.onNext()
        expect(spy1.callCount).to.equal(1)
        expect(spy2.callCount).to.equal(0)

        source.onNext()
        expect(spy1.callCount).to.equal(1)
        expect(spy2.callCount).to.equal(1)
    })

    test("select returns observable with specified value", function () {
        var source = new Rx.Subject(),
            result = source.when(2).select()

        expect(result()).to.be.undefined
        source.onNext(1)
        expect(result()).to.be.undefined
        source.onNext(2)
        expect(result()).to.equal(2)        
    })

    test("select returns value of expression", function () {
        var source = new Rx.Subject(),
            result = source.when(x => x.i == 2).select(x => x.value)

        expect(result()).to.be.undefined
        source.onNext({ i: 1, value: 2 })
        expect(result()).to.be.undefined
        source.onNext({ i: 2, value: 4 })
        expect(result()).to.equal(4)        
    })
})
