var Rx = require('rx')

suite('tribe.rx.browser.bindingHandlers.scalar', function () {
    test("text behaviour is preserved for non Rx.Observable", function () {
        var observable = ko.observable(1),
            spy = sinon.stub().returns(observable)

        // the binding is reparsed each time the observable changes
        $('body').append('<span data-bind="text: value()"></span>')
        ko.applyBindings({ value: spy })
        expect($('body span').text()).to.equal('1')
        expect(spy.callCount).to.equal(2)

        observable(2)
        expect($('body span').text()).to.equal('2')
        expect(spy.callCount).to.equal(3)
    })

    test("text binding is not reparsed when result is Rx.Observable", function () {
        var observable = new Rx.Subject(),
            spy = sinon.stub().returns(observable)

        // we don't want this with Rx.Observables, otherwise a blank, new Observable is created each time the value changes
        $('body').append('<span data-bind="text: value()"></span>')
        ko.applyBindings({ value: spy })

        observable.onNext(1)
        expect($('body span').text()).to.equal('1')
        expect(spy.callCount).to.equal(1)

        observable.onNext(2)
        expect($('body span').text()).to.equal('2')
        expect(spy.callCount).to.equal(1)
    })
})
