var Facet = require('tribe.pubsub/facet'),
    Pubsub = require('tribe.pubsub/pubsub'),
    pubsub;

require('../facet.extensions')

setup(function () {
    pubsub = new Pubsub({ sync: true, handleExceptions: false });
});

suite('tribe.rx.facet.extensions.messages', function () {
    test("property is lazily evaluated", function () {
        var facet = new Facet(pubsub)
        expect(Object.keys(facet.handlers).length).to.equal(0)
        var observable = facet.messages
        observable.subscribe(function () {})
        expect(Object.keys(facet.handlers).length).to.equal(1)
    })

    test("property is cached", function () {
        var facet = new Facet(pubsub),
            messages1 = facet.messages,
            messages2 = facet.messages
        expect(messages1).to.equal(messages2)
    })

    test("messages returns rx observable linked to facet pubsub", function () {
        var facet = new Facet(pubsub),
            observable = facet.messages,
            spy = sinon.spy()

        observable.where(function (message) { return message[0] === 'a' }).subscribe(spy)
        facet.start()
        pubsub.publish('topic', 'aa')
        pubsub.publish('topic', 'ab')
        pubsub.publish('topic', 'ba')
        expect(spy.callCount).to.equal(2)
    })

    test("envelopes returns rx observable linked to facet pubsub", function () {
        var facet = new Facet(pubsub),
            observable = facet.envelopes,
            spy = sinon.spy()

        observable.where(function (envelope) { return envelope.data[0] === 'a' }).subscribe(spy)
        facet.start()
        pubsub.publish('topic', 'aa')
        pubsub.publish('topic', 'ab')
        pubsub.publish('topic', 'ba')
        expect(spy.callCount).to.equal(2)
    })

    test("observable receives replayed messages", function () {
        var facet = new Facet(pubsub),
            observable = facet.messages,
            spy = sinon.spy()

        observable.where(function (message) { return message[0] === 'a' }).subscribe(spy)
        facet.replay([
            { topic: 'topic', data: 'aa' },
            { topic: 'topic', data: 'ab' },
            { topic: 'topic', data: 'ba' }
        ])
        expect(spy.callCount).to.equal(2)
    })
})
