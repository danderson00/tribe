suite('tribe.rx.vocabulary', function () {
    var vocabulary = require('../vocabulary'),
        Rx = require('rx')

    vocabulary.register({
        whereIdMatches: (e, id) => e.where(x => x.id === id),
        testData: e => e.select(x => x.testData)
    })

    test("register extends Rx.Observable", function () {
        expect(Rx.Observable.prototype.whereIdMatches).to.be.a.function
    })

    test("vocabulary expressions are evaluated", function () {
        var spy = sinon.spy(),
            subject = new Rx.Subject(),
            filtered = subject.whereIdMatches(1)

        filtered.subscribe(spy)

        subject.onNext({ id: 0 })
        expect(spy.callCount).to.equal(0)

        subject.onNext({ id: 1 })
        expect(spy.callCount).to.equal(1)
    })

    test("vocabulary can be chained", function () {
        var spy = sinon.spy(),
            subject = new Rx.Subject(),
            filtered = subject.whereIdMatches(1).testData()

        filtered.subscribe(spy)

        subject.onNext({ id: 0, testData: 'test0' })
        expect(spy.callCount).to.equal(0)

        subject.onNext({ id: 1, testData: 'test1' })
        expect(spy.firstCall.args[0]).to.equal('test1')

        subject.onNext({ id: 1, testData: 'test2' })
        expect(spy.secondCall.args[0]).to.equal('test2')
    })
})
