var Rx = require('rx')
require('../Observable.extensions')

suite('tribe.rx.Observable.extensions', function () {
    test("asScalar returns an observable that evalues to the last value presented", function () {
        var source = new Rx.Subject(),
            observable = source.asScalar()

        source.onNext(5)
        expect(observable()).to.equal(5)

        source.onNext('test')
        expect(observable()).to.equal('test')
    })

    test("asArray returns an observableArray that concatenates each value presented", function () {
        var source = new Rx.Subject(),
            observable = source.asArray()

        source.onNext(5)
        expect(observable()).to.deep.equal([5])

        source.onNext('test')
        expect(observable()).to.deep.equal([5, 'test'])
    })

    test("when executes then action when value matches value predicate", function () {
        var source = new Rx.Subject(),
            spy = sinon.spy()

        source.when(2).then(spy)
        source.onNext(1)
        source.onNext(2)
        source.onNext(3)
        source.onNext(2)

        expect(spy.callCount).to.equal(2)
        expect(spy.firstCall.args[0]).to.equal(2)
        expect(spy.secondCall.args[0]).to.equal(2)
    })

    test("when executes then action when function predicate evaluates to true", function () {
        var source = new Rx.Subject(),
            spy = sinon.spy()

        source.when(function (x) { return x == 2 }).then(spy)
        source.onNext(1)
        source.onNext(2)
        source.onNext(3)
        source.onNext(2)

        expect(spy.callCount).to.equal(2)
        expect(spy.firstCall.args[0]).to.equal(2)
        expect(spy.secondCall.args[0]).to.equal(2)
    })

    test("when calls can be chained", function () {
        var source = new Rx.Subject(),
            spy1 = sinon.spy(),
            spy2 = sinon.spy()

        source.when(2).then(spy1).when(3).then(spy2)
        source.onNext(1)
        source.onNext(2)
        source.onNext(3)
        source.onNext(2)

        expect(spy1.callCount).to.equal(2)
        expect(spy2.callCount).to.equal(1)
    })
})
