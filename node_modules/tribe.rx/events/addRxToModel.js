var query = require('../query'),
    facet = require('tribe.pubsub/facet'),
    getArguments = require('tribe/utilities/arguments')

T.Events.addRxToModel = function (pane, context) {
    if(!pane.model.hasOwnProperty('messages')) {
        Object.defineProperty(pane.model, 'messages', { get: function () {
            return paneFacet().messages
        } })
    }

    if(!pane.model.hasOwnProperty('envelopes')) {
        Object.defineProperty(pane.model, 'envelopes', { get: function () {
            return paneFacet().envelopes
        } })
    }

    if(!pane.model.topic) {
        pane.model.topic = function (topic) {
            return paneFacet().envelopes
                .topic(topic)
                .select(function (x) { return x.data })
        }
    }

    if(!pane.model.query) {
        pane.model.query = function (scopeOrTopic) {
            var args = getArguments(arguments),
                topic = args.string,
                scope = args.object

            return query(pane, context, topic, scope)
        }
    }

    function paneFacet() {
        if(!pane.__generatedFacet) {
            pane.__generatedFacet = new facet(pane.pubsub, constructor)
            // this blocks renderComplete until completed
            context.renderOperation.add(pane.__generatedFacet)
        }
        return pane.__generatedFacet

        function constructor(facet) {
            facet.isDistributed && facet.isDistributed()
        }
    }
}
