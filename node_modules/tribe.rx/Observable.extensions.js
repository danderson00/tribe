var Rx = require('rx')

Rx.Observable.prototype.asArray = function() {
    var result = ko.observableArray()
    this.subscribe(function (value) {
        result.push(value)
    })
    return result
}

Rx.Observable.prototype.asScalar = function() {
    var result = ko.observable()
    this.subscribe(function (value) {
        result(value)
    })
    return result
}

Rx.Observable.prototype.topic = function (topic) {
    return this.where(function (x) { return x.topic === topic })
}

Rx.Observable.prototype.when = function (predicate) {
    var observable = this

    return {
        then: function (action) {
            observable.subscribe(function (value) {
                if((predicate.constructor === Function && predicate(value)) || predicate === value)
                    action(value);
            })

            return {
                when: function (predicate) {
                    return observable.when.apply(observable, arguments)
                }
            }
        }
    }
}
