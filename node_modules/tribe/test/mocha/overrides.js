var stepInto = require('tribe/test/stepInto'),
    Mocha = require('mocha'),
    _ = require('underscore'),
    Q = require('q');

// add the ability to return promises from tests
var originalAddTest = Mocha.Suite.prototype.addTest;
Mocha.Suite.prototype.addTest = function (test) {
    var tests = test.fn;

    test.async = true;
    test.sync = false;
    test.originalFn = tests;

    // override the original test function
    test.fn = function (done) {
        var returnValue = test.stepInto ? stepInto(tests, done) : tests(done);
        if (isPromise(returnValue))
            Q(returnValue).then(function () {
                done();
            }, done);
        else
            if(tests.length === 0) done();
    };
    return originalAddTest.call(this, test);
};

function isPromise(target) {
    return target && typeof(target.then) === 'function';
}


// arrange suites in a heirarchy by splitting suite names at each dot
// Suite.create is used exclusively throughout mocha
var originalCreate = Mocha.Suite.create;
Mocha.Suite.create = function (parent, title) {
    var titles = title.split('.');
    return _.reduce(titles, function (suite, title) {
        var existing = _.findWhere(suite.suites, { title: title });
        return existing || originalCreate(suite, title);
    }, parent);
};
