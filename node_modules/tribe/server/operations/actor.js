var eventStore = require('tribe/storage').entity('messages'),
    actors = require('tribe/actors'),
    expressions = require('tribe.expressions');

module.exports = function (options, context) {
    //{ actor: '/path', scope: 'scope' }
    // authenticate and authorise!

    var definition = actors.definition(options.actor),
        // this defaults to getting scope from envelope.data
        expression = expressions.apply(definition.expression, { data: options.scope });

    subscribe(definition.topics, expression);

    if (expression)
        return returnMessages(expression);
    else
        context.ack({});

    function subscribe(topics, expression) {
        context.pubsub.subscribe(topics, function (data, envelope) {
            if (envelope.sourceId !== context.clientId)
                context.socket.emit('message', envelope);
        }, expression);
    }

    function returnMessages(expression) {
        return eventStore.retrieve(expression)
            .then(function (envelopes) {
                context.ack({ envelopes: envelopes });
            })
            .fail(function (err) {
                log.error('Failed to retrieve actor messages', err);
                context.ack(null, err);
            });
    }
}