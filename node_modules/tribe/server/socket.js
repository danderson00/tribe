module.exports = {
    start: function (server) {
        var server = require('./http').server,
            io = require('socket.io').listen(server),
            log = require('tribe/logger'),
            pubsub = require('tribe.pubsub'),
            channels = require('tribe/server/channels'),
            options = require('tribe/options');

        module.exports.io = io;

        io.set('log level', 1);
        io.sockets.on('connection', function (socket) {
            var address = socket.handshake.address;
            log.debug('Client connected - ' + address.address + ':' + address.port);
            
            socket.on('message', function (envelope, ack) {
                // need persistent queue storage here. Actors and statics will be invoked on the other side.
                envelope.__origin = socket;
                pubsub.publish(envelope);
                ack();
            });
            
            socket.on('join', function (channel) {
                log.debug('Client joined channel ' + channel + ' - ' + address.address + ':' + address.port);
                channels.join(channel, socket);
            });

            socket.on('startActor', function(data) {
                log.debug('Starting actor ' + data.path);
                socket.join(data.id);
                actors.start(data.path, data.id, data.data);
            });

            socket.on('disconnect', function () {
                log.debug('Client disconnected - ' + address.address + ':' + address.port);
                channels.leaveAll(socket);
            });
        });
    }
};