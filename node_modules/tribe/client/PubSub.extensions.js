var hub = require('./hub'),
    actors = require('tribe/actors'),
    pubsub = require('tribe.pubsub/pubsub'),
    actorModule = require('tribe.pubsub/actor'),
    lifetime = require('tribe.pubsub/lifetime');

pubsub.prototype.obtainActor = function (path, id) {
    var self = this;

    if (path.charAt(0) !== '/')
        path = '/' + path;

    return hub.subscribe({ actor: path, id: id }).then(function (data) {
        // { path: '/path', id: 'id', envelopes: [{...},...] }
        var actor = new actorModule(self, actorDefinition(path), id).start();
        actors.replay(actor, data.envelopes);
        return actor.instance;
    });
};

pubsub.prototype.startActor = function (path, id, data) {
    if (path.charAt(0) !== '/')
        path = '/' + path;

    var actor = new actorModule(this, actorDefinition(path), id);

    if (actor.metadata.isDistributed)
        attachToHub(path, actor);

    return actor.start(data);
};

function actorDefinition(path) {
    return actors.actors[path].constructor;
}

// need to also be able to detach
function attachToHub(path, actor) {
    hub.subscribe({ actor: path, id: actor.id });
    actor.pubsub.subscribe(actor.topics, function (message, envelope) {
        hub.publish(envelope);
    });
}

lifetime.prototype.startActor = pubsub.prototype.startActor;
lifetime.prototype.obtainActor = pubsub.prototype.obtainActor;
