var hub = require('./hub'),
    serializer = require('tribe/utilities/serializer'),
    pubsub = require('tribe.pubsub/pubsub'),
    actorModule = require('tribe.pubsub/actor'),
    channel = require('tribe.pubsub/channel'),
    lifetime = require('tribe.pubsub/lifetime');

pubsub.prototype.startActor = function (path, data, id) {
    if (path.charAt(0) !== '/')
        path = '/' + path;

    var actor = new actorModule(this, actorDefinition(path), id);

    if (actor.runsOnServer) {
        attachToHub(actor);
        hub.startActor(path, id, data);
    }

    return actor.start(data);
};

pubsub.prototype.resumeActor = function (id, path, data) {
    var deferred = $.Deferred();
    var self = this;
    $.when($.get('Data/' + id + '/' + id))
        .done(function (data) {
            var actor = new Tribe.PubSub.Actor(self, actorDefinition(data.path));
            actor.id = id;
            actor.join(serializer.deserialize(data.data));
            attachToHub(actor);
            deferred.resolve(actor);
        })
        .fail(function (reason) {
            if (reason.status === 404 && path) {
                var actor = self.startActor(id, path, data);
                deferred.resolve(actor);
            }
            else deferred.reject(reason);

        });
    return deferred;
};

function actorDefinition(path) {
    return T.context().actors[path].constructor;
}

// need to also be able to detach
function attachToHub(actor) {
    hub.join(actor.id);
    actor.pubsub.subscribe(actor.topics, function (message, envelope) {
        envelope.actorId = actor.id;
        hub.publish(envelope);
    });
}

lifetime.prototype.startActor = pubsub.prototype.startActor;
lifetime.prototype.resumeActor = pubsub.prototype.resumeActor;
channel.prototype.startActor = pubsub.prototype.startActor;
channel.prototype.resumeActor = pubsub.prototype.resumeActor;

channel.prototype.connect = function (topics) {
    var self = this;

    hub.join(this.id);
    this.subscribe(topics || '*', function(data, envelope) {
        hub.publish(envelope);
    });

    var end = this.end;
    this.end = function() {
        hub.leave(self.channelId);
        end();
    };

    return this;
};
