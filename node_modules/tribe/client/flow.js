// generates an actor definition from an alternate API focused around navigation flows
// the actor instance exposes a single observable called pane. intended to be consumed by the flow binding handler
// this should really be part of composite, but that has not yet been converted to use modules, which adds certain complexities
module.exports = function (definition) {
    var pane = ko.observable()

    function to(destination) {
        return function (data) {
            pane(createDestination())

            function createDestination() {
                if(destination.constructor === String)
                    return { path: destination, data: data }
                return {
                    path: destination.path,
                    data: destination.data || data,
                    scope: destination.scope
                }
            }
        }
    }

    return function (actor) {
        definition({
            startsAt: pane,
            messages: actor.messages,
            envelopes: actor.envelopes,
            on: function (topic) {
                return {
                    to: function (destination) {
                        actor.handles(topic, function (data) {
                            to(destination)(data)
                        })
                    }
                }
            },
            to: to
        }, to)
        this.pane = pane
    }
}
