ko.bindingHandlers.arrayField = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var pane = T.Utils.extractNode(bindingContext).pane,
            name = valueAccessor(),
            boundLength = allBindingsAccessor().length,
            length = ko.isObservable(boundLength) ? boundLength : ko.observable(boundLength || 1),
            value = createArray();

        length.subscribe(function (newLength) {
            var difference = newLength - value().length;

            for(var i = 0; i < Math.abs(difference); i++)
                if(difference > 0)
                    value.push(ko.observable());
                else
                    value.pop();
        });

        fields()[name] = value;
        ko.bindingHandlers.foreach.init(element, function () { return value; }, allBindingsAccessor, viewModel, bindingContext);

        function createArray() {
            return ko.observableArray(Array.apply(null, Array(+length())).map(ko.observable));
        }

        function fields() {
            if(!pane.model.fields)
                pane.model.fields = {};
            return pane.model.fields;
        }
    },
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var name = valueAccessor(),
            pane = T.Utils.extractNode(bindingContext).pane,
            value = pane.model.fields[name];

        ko.bindingHandlers.foreach.update(element, function () { return value; }, allBindingsAccessor, viewModel, bindingContext);
    }
};
