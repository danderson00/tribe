ko.bindingHandlers.arrayField = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var pane = T.Utils.extractNode(bindingContext).pane,
            source = valueAccessor(),
            boundLength = allBindingsAccessor().length,
            length = ko.isObservable(boundLength) ? boundLength : ko.observable(boundLength || 1),
            boundValue = createArray(),
            value = ko.observableArray(boundValue().map(function (item) {
                return item.value;
            }));

        value.boundValue = boundValue;

        length.subscribe(function (newLength) {
            var difference = newLength - value().length;

            for(var i = 0; i < Math.abs(difference); i++)
                if(difference > 0) {
                    var newValue = ko.observable();
                    boundValue.push({ value: newValue });
                    value.push(newValue);
                } else {
                    boundValue.pop();
                    value.pop();
                }
        });

        if(ko.isObservable(source))
            source(value);
        else
            fields()[source] = value;

        return ko.bindingHandlers.foreach.init(element, function () { return boundValue; }, allBindingsAccessor, viewModel, bindingContext);

        function createArray() {
            return ko.observableArray(Array.apply(null, Array(+length())).map(function () { return { value: ko.observable() } }));
        }

        function fields() {
            if(!pane.model.fields)
                pane.model.fields = {};
            return pane.model.fields;
        }
    },
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var source = valueAccessor(),
            pane = T.Utils.extractNode(bindingContext).pane,
            value = ko.isObservable(source) ? ko.unwrap(source) : pane.model.fields[source];

        return ko.bindingHandlers.foreach.update(element, function () { return value.boundValue; }, allBindingsAccessor, viewModel, bindingContext);
    }
};
