var actorModule = require('tribe.pubsub/actor');

ko.bindingHandlers.topic = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var pane = T.Utils.extractNode(bindingContext).pane,
            actor = paneActor(),
            topic = valueAccessor(),

            // in future, we want to attach this to the actor so it is serialised with snapshots
            // this will also be different when we start to handle aggregates like 'sum'
            list = ko.observableArray();

        actor.handles(valueAccessor(), function (data) {
            list.push(data);
        });

        ko.bindingHandlers.forEach.init(element, function () { return list; }, function () { return {} }, viewModel, bindingContext);

        function paneActor() {
            if(!pane.__generatedActor) {
                pane.__generatedActor = new actorModule(pane.pubsub, constructor);
                // this blocks renderComplete until completed
                context.renderOperation.add(pane.__generatedActor);
            }
            return pane.__generatedActor;
        }

        function constructor(actor) {
            actor.isDistributed();
        }
    }
}
