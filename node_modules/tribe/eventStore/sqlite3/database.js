var initialise = require('./initialise'),
    Q = require('q'),
    sqlite3 = require('sqlite3'),
    path = require('path'),
    fs = require('fs');

var api = module.exports = {
    open: function (filename) {
        var filename = filename,
            inMemory = filename === ':memory:',
            exists = inMemory ? false : fs.existsSync(filename);

        api.db = new sqlite3.Database(filename);

        // *sigh*
        api.requiresInitialise = !exists;

        return api;
    },
    initialise: function (indexes) {
        return initialise(api, indexes);
    },
    serialise: function (callback) {
        var deferred = Q.defer();

        api.db.serialize(function () {
            var result = callback(api.db, rejectOnError);
            api.db.wait(function () {
                // give other database operation callbacks a chance to complete before resolving the promise
                setTimeout(function () {
                    try {
                        Q.when(result).then(deferred.resolve);
                    } catch (ex) {
                        rejectOnError(ex);
                    }
                });
            });
        });

        return deferred.promise;

        function rejectOnError(err) {
            if (err) deferred.reject(err);
            return err;
        }
    },
    run: operation('run'),
    get: operation('get'),
    all: operation('all'),
    close: function () {
        api.db && api.db.close();
        delete api.db;
    }
};

function operation(name) {
    return function (query, parameters) {
        if (query.query) {
            parameters = query.params;
            query = query.query;
        }

        var deferred = Q.defer();

        api.db[name](query, parameters, function (err, result) {
            if (err)
                deferred.reject(err);
            else
                deferred.resolve(result);
        });

        return deferred.promise;
    }
}