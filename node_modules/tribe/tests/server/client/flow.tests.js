suite('tribe.client.flow', function () {
    var flowModule = require('tribe/facets/flow'),
        pubsubModule = require('tribe.pubsub/pubsub'),
        facetModule = require('tribe.pubsub/facet'),
        pubsub

    setup(function () {
        pubsub = new pubsubModule({ sync: true })
    })

    test("flow sets start pane", function () {
        var facet = new facetModule(pubsub, flowModule(function (flow) {
            flow.startsAt('test')
        }))
        expect(facet.instance.pane()).to.deep.equal({ path: 'test', data: undefined })
    })

    test("flow sets pane when to is called", function () {
        var to,
            facet = new facetModule(pubsub, flowModule(function (flow) {
                to = flow.to
            }))
        to('test')('data')
        expect(facet.instance.pane()).to.deep.equal({ path: 'test', data: 'data' })
    })

    test("flow attaches handlers", function () {
        var facet = new facetModule(pubsub, flowModule(function (flow) {
            flow.on('topic').to('test')
        }))
        facet.start()
        pubsub.publish('topic', 'data')
        expect(facet.instance.pane()).to.deep.equal({ path: 'test', data: 'data' })
    })

    test("flow attaches rx expressions", function () {
        var facet = new facetModule(pubsub, flowModule(function (flow) {
            flow.messages.count().when(2).then(flow.to('test'))
        }))
        facet.start()
        pubsub.publish('topic')
        expect(facet.instance.pane()).to.be.undefined
        pubsub.publish('topic')
        expect(facet.instance.pane()).to.deep.equal({ path: 'test', data: 2 })
    })
})
