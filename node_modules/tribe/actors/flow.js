// generates an actor definition from an alternate API focused around navigation flows
// the actor instance exposes a single observable called pane. intended to be consumed by the flow binding handler
// this should really be part of composite, but that has not yet been converted to use modules, which adds certain complexities
module.exports = function (definition) {
    return function (actor) {
        var pane = ko.observable()

        this.pane = pane
        actor.to = to

        actor.startsAt = function (startPane) {
            pane(createDestination(startPane))
        }

        actor.on = function (topic) {
            return {
                to: function (destination) {
                    actor.handles(topic, function (data) {
                        to(destination)(data)
                    })
                },
                startChild: function (path) {
                    actor.handles(topic, function () {
                        actor.startChild(path)
                    })
                }
            }
        }

        actor.startChild = function (path) {
            pane({ path: '/__flow', data: { flow: path } })
        }

        definition(actor, to)

        function to(destination) {
            return function (data) {
                pane(createDestination(destination, data))
            }
        }
    }

    function createDestination(destination, data) {
        if(destination.constructor === String)
            return { path: destination, data: data }
        return {
            path: destination.path,
            data: destination.data || data,
            scope: destination.scope
        }
    }
}
