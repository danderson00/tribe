var build = require('tribe/build'),
    options = require('tribe/options'),
    utils = require('tribe/utilities'),
    memory = require('tribe/server/modules/memory'),
    test = require('tribe/test');

build.activities.register('tests.agent', function () {
    return {
        render: function (context, b) {
            build.blocks('renderTemplate')('tests.agent', { options: browserOptions() }).to('tests.agent.html', 'tests.agent')(context, b);
            return build.blocks('browserify')('tests', configure).to('tests.agent.js', 'tests.agent')(context, b);
        },
        output: function (context, b) {
            memory.register(b.name || 'tests.agent', context['tests.agent']);
        }
    };
});

function configure(b, files) {
    b.exclude('./lib-cov/mocha');
    b.ignore('./html-cov');
    b.require(require.resolve('tribe/node_modules/mocha/lib/reporters/dot'), { expose: './reporters/dot' });

    b.add(require.resolve('tribe/client/PubSub.extensions'));
    b.require(require.resolve('tribe.pubsub'), { expose: 'tribe.pubsub' });
    b.require(require.resolve('tribe/test/mocha/browser'), { expose: 'tribe/test' });
    b.require(require.resolve('tribe/options.browser'), { expose: 'tribe/options' });
    b.require(require.resolve('tribe/client'), { expose: 'tribe' });

    b.transform(utils.streams.throughTransform(function (source, file) {
        // add placeholder properties for infrastructure provided on client
        // structure is duplicated in tribe/test/mocha/browser - a tad flaky!
        var context = { expect: '', assert: '', sinon: '' };
        test.mocha.suite.emit('pre-require', context, file.appPath, test.mocha);
        return "require('tribe/test').register('" + file.appPath + "', " + utils.script.wrapper(source, context) + ");\n";
    }, files));
}

function browserOptions() {
    return JSON.stringify({
        test: options.test
    });
}