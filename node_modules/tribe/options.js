var pubsub = require('tribe.pubsub'),
    modules = require('tribe/server/modules'),
    _ = require('underscore'),
    path = require('path');

pubsub.options.sync = true;
pubsub.options.handleExceptions = false;

var options = module.exports = {
    apply: function (optionsToApply) {
        return _.extend(options, optionsToApply);
    },

    port: 1678,
    appName: 'Tribe',
    basePath: basePath(),
    dataPath: basePath() + 'Data/',
    modulePath: modulePath(),
    testPaths: testPaths(),
    browserTestPaths: browserTestPaths(),
    debug: debugMode(),
    debugPort: process.debugPort,
    inspectorPort: 8080,
    enhancedDebug: true,
    childProcess: false,
    watcherDelay: 200,
    rebuildThrottle: 200,
    //showDependencies: true, // we will eventually have a built-in app and service for spelunking dependencies
    builds: [
        {
            name: 'app',
            phases: ['prepare', 'render', 'output', 'server'],
            path: basePath(),
            tasks: [
                { activity: 'app' },
                { activity: 'dependencies', options: { path: 'dependencies' } },
                { activity: 'panes', options: { path: 'panes' } },
                { activity: 'resources', options: { path: 'actors' } },
                { activity: 'resources', options: { path: 'handlers' } },
                { activity: 'resources', options: { path: 'services' } },
                { activity: 'scripts', options: { path: 'scripts' } },
                { activity: 'styles', options: { path: 'styles' } },
                { activity: 'templates', options: { path: 'templates' } },
            ]
        },
        {
            name: 'tests',
            phases: ['prepare', 'render', 'output', 'server'],
            path: path.resolve(__dirname, 'test-studio'),
            tasks: [
                { activity: 'app' },
                { activity: 'panes', options: { path: 'panes' } },
                { activity: 'resources', options: { path: 'actors' } },
            ]
        },
        {
            name: 'tests.agent',
            phases: ['prepare', 'render', 'output', 'server'],
            path: basePath(),
            tasks: [
                { activity: 'panes', options: { path: 'panes' } },
                { activity: 'tests.agent' },
                { activity: 'tests.browser', options: { path: 'tests/browser' } } // see below
            ]
        }
    ],
    server: {
        modules: [
            // map static directories
            modules.fs('/images', path.resolve(basePath(), 'images')),
            modules.fs('/tests/images', path.resolve(modulePath(), 'test-studio/images')),

            // memory file collections are created as part of builds
            // set directory default pages
            modules.memory.mapFile('/', 'app', 'app.htm'),
            modules.memory.mapFile('/tests/', 'tests', 'app.htm'),

            // map directories -- ensure child directories are done before the root directory
            modules.memory('/tests.agent', 'tests.agent'),
            modules.memory('/tests', 'tests'),
            modules.memory('/', 'app'),
        ]
    },
    test: {
        framework: 'mocha',
        mocha: {
            ui: 'tdd'
        },
        debugPort: 5859,
        restartThrottle: 200,
        fileFilter: /\.tests\.js$/,
        // suspending watchers causes all watchers against that path to be cancelled
        // will be resolved when file changes are broadcast using pubsub
        suspendWatchers: false, 
        browser: {
            runOnServer: false,
            loadApp: true
        }
    }
};

function basePath() {
    var basePath = process.argv[1];
    return basePath.substr(0, basePath.lastIndexOf(path.sep) + 1);
}

function modulePath() {
    return __dirname;
}

function debugMode() {
    return process.execArgv.indexOf('--debug') > -1 || process.execArgv.indexOf('--debug-brk') > -1;
}

// these will be replaced by the config system when implemented
function testPaths() {
    return [
        basePath() + 'tests/'
    ];
}

function browserTestPaths() {
    return [
        basePath() + 'tests/browser'
    ];
}
