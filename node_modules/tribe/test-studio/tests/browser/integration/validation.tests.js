suite('tribe.browser.integration.validation', function () {
    test("validation specified on models is validated", function () {
        var node = T.createNode('body', { path: '/tests/validation/model' })
        expect(node.pane.model.isValid()).to.be.false
        $('input').val('test').change()
        expect(node.pane.model.isValid()).to.be.true
    })

    test("validation specified on attributes is validated", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/html' })
        
        // knockout.validation parses html attributes asynchronously
        setTimeout(function () {
            expect(node.pane.model.isValid()).to.be.false
            $('input').val('test').change()
            expect(node.pane.model.isValid()).to.be.true
            done()
        })
    })

    test("validation specified on fields is validated", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/field' })

        setTimeout(function () {
            expect(node.pane.model.isValid()).to.be.false
            $('input').val('test').change()
            expect(node.pane.model.isValid()).to.be.true
            done()
        })
    })

    test("validation failure class is applied to model properties on change", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/model' })

        setTimeout(function () {
            expect($('input').hasClass('validationElement')).to.be.false
            $('input').change()
            expect($('input').hasClass('validationElement')).to.be.true
            done()
        })
    })

    test("validation failure class is applied to model properties with html attribute on change", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/model' })

        setTimeout(function () {
            expect($('input').hasClass('validationElement')).to.be.false
            $('input').change()
            expect($('input').hasClass('validationElement')).to.be.true
            done()
        })
    })

    test("validation failure class is applied to fields on change", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/field' })

        setTimeout(function () {
            expect($('input').hasClass('validationElement')).to.be.false
            // some difference in how the observable is bound on fields, requires actually changing the observable
            $('input').val('a').change().val('').change()
            expect($('input').hasClass('validationElement')).to.be.true
            done()
        })
    })

    test("validation failure class is applied to fields when isValid is called", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/field' })

        setTimeout(function () {
            expect($('input').hasClass('validationElement')).to.be.false
            node.pane.model.isValid()
            expect($('input').hasClass('validationElement')).to.be.true
            done()
        })
    })
})
