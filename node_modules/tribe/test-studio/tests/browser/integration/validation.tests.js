suite('tribe.browser.integration.validation', function () {
    test("models are validated", function () {
        var node = T.createNode('body', { path: '/tests/validation/model' })
        expect(node.pane.model.isValid()).to.be.false
        $('input').val('test').change()
        expect(node.pane.model.isValid()).to.be.true
    })

    test("attributes are validated", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/html' })
        
        // knockout.validation parses html attributes asynchronously
        setTimeout(function () {
            expect(node.pane.model.isValid()).to.be.false
            $('input').val('test').change()
            expect(node.pane.model.isValid()).to.be.true
            done()
        })
    })

    test("attributes on fields are validated", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/field' })

        setTimeout(function () {
            expect(node.pane.model.isValid()).to.be.false
            $('input').val('test').change()
            expect(node.pane.model.isValid()).to.be.true
            done()
        })
    })

    test("failure class is applied to model properties on change", function () {
        var node = T.createNode('body', { path: '/tests/validation/model' })
        expect($('input').hasClass('validationElement')).to.be.false
        $('input').change()
        expect($('input').hasClass('validationElement')).to.be.true
    })

    test("failure class is applied to model properties with html attribute on change", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/model' })

        setTimeout(function () {
            expect($('input').hasClass('validationElement')).to.be.false
            $('input').change()
            expect($('input').hasClass('validationElement')).to.be.true
            done()
        })
    })

    test("failure class is applied to fields on change", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/field' })

        setTimeout(function () {
            expect($('input').hasClass('validationElement')).to.be.false
            // some difference in how the observable is bound on fields, requires actually changing the observable
            $('input').val('a').change().val('').change()
            expect($('input').hasClass('validationElement')).to.be.true
            done()
        })
    })

    test("failure class is applied to fields when isValid is called", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/field' })

        setTimeout(function () {
            expect($('input').hasClass('validationElement')).to.be.false
            node.pane.model.isValid()
            expect($('input').hasClass('validationElement')).to.be.true
            done()
        })
    })

    test("failure class is removed when reset is called", function () {
        var node = T.createNode('body', { path: '/tests/validation/model' })
        expect($('input').hasClass('validationElement')).to.be.false
        $('input').change()
        expect($('input').hasClass('validationElement')).to.be.true
        node.pane.model.isValid.reset()
        expect($('input').hasClass('validationElement')).to.be.false        
    })

    test("model is not validated on click when validate binding handler is not set", function () {
        var node = T.createNode('body', { path: '/tests/validation/model' })

        expect($('input').hasClass('validationElement')).to.be.false
        $('button').click()
        expect($('input').hasClass('validationElement')).to.be.false
        expect(node.pane.clicked).to.be.true
    })

    test("model is validated on click when validate binding handler is set", function (done) {
        var node = T.createNode('body', { path: '/tests/validation/field' })

        setTimeout(function () {
            expect($('input').hasClass('validationElement')).to.be.false
            $('button').click()
            expect($('input').hasClass('validationElement')).to.be.true
            expect(node.pane.clicked).to.be.undefined
            done()
        })
    })
})
