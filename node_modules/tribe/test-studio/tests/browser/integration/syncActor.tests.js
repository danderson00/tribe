var pubsub = require('tribe.pubsub'),
    actor = require('tribe.pubsub/actor'),
    hub = require('tribe/client/hub'),
    uuid = require('node-uuid')

suite('tribe.browser.integration.syncActor', function () {
    test("actor inherits scope from pubsub scope", function () {
        var actorId = uuid.v4()
        var lifetime = pubsub.createLifetime({ actorId: actorId })

        return hub.publish({ topic: 'topic', data: { actorId: actorId } })
            .then(function () {
                return hub.publish({ topic: 'topic', data: { actorId: 'otherId' } })
            })
            .then(function () {
                return lifetime.syncActor(new actor(lifetime, createActorConstructor('topic')))
            })
            .then(function (actor) {
                expect(actor.count).to.equal(1)
            })
    })

    test("actors can be synced without scope", function () {
        var topic = uuid.v4()

        return hub.publish({ topic: topic, data: { value: 'a' } })
            .then(function () {
                return hub.publish({ topic: topic, data: { value: 'b' } })
            })
            .then(function () {
                return pubsub.syncActor(new actor(pubsub, createActorConstructor(topic)))
            })
            .then(function (actor) {
                expect(actor.count).to.equal(2)
            })
    })
})

function createActorConstructor(topic) {
    return function(actor) {
        var self = this

        actor.isDistributed()
        actor.isScopedTo('actorId')

        actor.handles(topic, function () {
            self.count++
        })

        this.count = 0
    }
}
