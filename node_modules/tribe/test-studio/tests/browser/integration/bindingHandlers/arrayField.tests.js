suite('tribe.browser.integration.bindingHandlers.arrayField', function () {
    test("length binding sets initial number of elements from scalar", function () {
        var node = T.createNode('body', { path: '/tests/arrayField', data: { source: 'field', length: 2 } })
        expect($('input').length).to.equal(2)
    })

    test("length binding sets number of elements from observable", function () {
        var length = ko.observable(2),
            node = T.createNode('body', { path: '/tests/arrayField', data: { source: 'field', length: length } })
        expect($('input').length).to.equal(2)
        expect($('span:eq(0)').text()).to.equal('0')
        expect($('span:eq(1)').text()).to.equal('1')
        length(3)
        expect($('input').length).to.equal(3)
        expect($('span:eq(2)').text()).to.equal('2')
    })

    test("creates array of observables accessed from value property", function () {
        var length = ko.observable(3),
            node = T.createNode('body', { path: '/tests/arrayField', data: { source: 'field', length: length } }),
            array = node.pane.model.fields.field

        array()[1]('test')
        expect($('input:eq(1)').val()).to.equal('test')
        $('input:eq(1)').val('test2')
        $('input:eq(1)').change()
        expect(array()[1]()).to.equal('test2')
    })

    test("shortening length preserves array values", function () {
        var length = ko.observable(3),
            node = T.createNode('body', { path: '/tests/arrayField', data: { source: 'field', length: length } }),
            array = node.pane.model.fields.field

        array()[1]('test')
        length(2)
        expect($('input').length).to.equal(2)
        expect(array()[1]()).to.equal('test')
        expect($('input:eq(1)').val()).to.equal('test')
        expect($('span:eq(1)').text()).to.equal('1')
    })

    test("applies value to observable if provided", function () {
        var length = ko.observable(2),
            existing = ko.observable(),
            node = T.createNode('body', { path: '/tests/arrayField', data: { source: existing, length: length } })
        $('input').val('test').change();
        expect(existing()().length).to.equal(2)
        expect(existing()()[0]()).to.equal('test')
    })
})
