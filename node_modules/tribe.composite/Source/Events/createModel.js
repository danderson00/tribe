T.Events.createModel = function (pane, context) {
    var definition = context.models[pane.path],
        model = (definition && definition.constructor)
            ? new definition.constructor(pane)
            : { };

    model.pane = model.pane || pane;
    model.data = model.data || pane.data;
    model.navigate = model.navigate || navigate;
    model.publish = model.publish || publishToPane;
    model.publish.toRoot = publishToRoot;

    T.Utils.embedState(model, context, pane.node);

    pane.model = model;

    function navigate(path, data) {
        var args = arguments;
        return function () {
            pane.navigate.apply(pane, args);
        };
    }

    function publishToPane(topicOrEnvelopes, data) {
        return publish(pane.pubsub, topicOrEnvelopes, data);
    }

    function publishToRoot(topicOrEnvelopes, data) {
        return publish(pane.pubsub.owner, topicOrEnvelopes, data);
    }

    function publish(pubsub, topicOrEnvelopes, data) {
        return function () {
            if(topicOrEnvelopes.constructor === Array)
                topicOrEnvelopes.forEach(function (envelope) {
                    pubsub.publish(T.Utils.cloneData(envelope));
                })
            else
                pubsub.publish(createEnvelope(topicOrEnvelopes, data));
        }
    }

    function createEnvelope(topicOrEnvelope, data) {
        return topicOrEnvelope && topicOrEnvelope.topic
            ? T.Utils.cloneData(topicOrEnvelope)
            : { topic: topicOrEnvelope, data: T.Utils.cloneData(data) };
    }
};
