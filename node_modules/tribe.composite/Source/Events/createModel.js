T.Events.createModel = function (pane, context) {
    var definition = context.models[pane.path],
        model = definition && definition.constructor
            ? new definition.constructor(pane)
            : {
                pane: pane,
                data: pane.data,
                navigate: navigate,
                publish: publish
            };

    T.Utils.embedState(model, context, pane.node);

    pane.model = model;

    function navigate(path, data) {
        var args = arguments;
        return function () {
            pane.navigate.apply(pane, args);
        };
    }

    function publish(topicOrEnvelopes, data) {
        return function () {
            if(topicOrEnvelopes.constructor === Array)
                topicOrEnvelopes.forEach(function (envelope) {
                    pane.pubsub.publish({ topic: envelope.topic, data: T.Utils.cloneData(envelope.data) });
                })
            else
                pane.pubsub.publish(createEnvelope(topicOrEnvelopes, T.Utils.cloneData(data)));
        }
    }

    function createEnvelope(topicOrEnvelope, data) {
        return topicOrEnvelope && topicOrEnvelope.topic
            ? topicOrEnvelope
            : { topic: topicOrEnvelope, data: data };
    }
};
