(function() {
    var domDataKey = '__tribe_initialRender__';
    ko.bindingHandlers.pane = { init: init, update: update };
    ko.virtualElements.allowedBindings.pane = true;

    function init() {
        return { controlsDescendantBindings: true };
    }

    function update(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        if(element && element.nodeType === 8) {
            var child = firstElementChild();
            if(child)
                T.nodeFor(child).navigate(constructPaneOptions(valueAccessor, allBindingsAccessor));
            else {
                ko.virtualElements.prepend(element, $('<div></div>')[0]);
                createNode(ko.virtualElements.firstChild(element));
            }
        } else
            createNode(element);

        function createNode(element) {
            T.createNode(element, constructPaneOptions(), T.Utils.extractNode(bindingContext), T.Utils.extractContext(bindingContext));
        }

        function constructPaneOptions() {
            return T.Utils.getPaneOptions(ko.utils.unwrapObservable(valueAccessor()), allBindingsAccessor());
        }

        function firstElementChild() {
            var child = ko.virtualElements.firstChild(element);
            return firstElementSibling(child);
            function firstElementSibling(sibling) {
                if(!sibling)
                    return null;

                if(sibling.nodeType === 1)
                    return sibling;

                return firstElementSibling(ko.virtualElements.nextSibling(sibling));
            }
        }
    }
})();
