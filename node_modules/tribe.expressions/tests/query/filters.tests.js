suite('tribe.expressions.query.filters', function () {
    var query = require('tribe.expressions/query')

    test("where returns target when predicates pass", function () {
        var q = query().where({ p1: 1, p2: 2 }),
            target1 = { p1: 1, p2: 2 },
            target2 = { p1: 1, p2: 2, p3: 3 }
        expect(q.evaluate(target1)).to.equal(target1)
        expect(q.evaluate(target2)).to.equal(target2)
    })

    test("where returns undefined when predicates fail", function () {
        var q = query().where({ p1: 1, p2: 2 })
        expect(q.evaluate({ p1: 1, p2: 1 })).to.be.undefined
    })

    test("where evaluates key paths", function () {
        var q = query().where({ 'p1.p2': 1, 'p3.p4': 2 })
        expect(q.evaluate({ p1: { p2: 1 }, p3: { p4: 2 } })).to.be.ok
        expect(q.evaluate({ p1: { p2: 1 }, pz: { p4: 2 } })).to.be.undefined
    })

    test("where is cumulative", function () {
        var q = query().where({ p1: 1 }).where({ p2: 2 });
        expect(q.evaluate({ p1: 1, p2: 2 })).to.be.ok
        expect(q.evaluate({ p1: 1, p2: 1 })).to.be.undefined
    })
})
