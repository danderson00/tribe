window.eval("Test = {\n    Unit: {},\n    Integration: {},\n    state: {}\n};\n\nTest.defaultOptions = function() {\n    return {\n        synchronous: true,\n        splitScripts: true,\n        handleExceptions: false,\n        basePath: 'Integration/Panes/',\n        loadStrategy: 'adhoc',\n        events: TC.defaultOptions().events\n    };\n};\nTC.options = Test.defaultOptions();\n\nsinon.spy(ko, 'applyBindings');\n\nQUnit.testDone(function () {\n    $('.__tribe').remove();\n    Test.state = {};\n    TC.options = Test.defaultOptions();\n    ko.applyBindings.reset();\n});\n\n//@ sourceURL=Tests/setup.js");
window.eval("TC.context = function (state) {\n    Test.Integration.context = $.extend({\n        models: new TC.Types.Models(),\n        loader: new TC.Types.Loader(),\n        options: TC.options,\n        templates: new TC.Types.Templates(),\n        loadedPanes: {},\n        renderOperation: new TC.Types.Operation(),\n        pubsub: Test.Integration.pubsub()\n    }, state);\n    return Test.Integration.context;\n};\n//@ sourceURL=Tests/Integration/Infrastructure/context.js");
window.eval("(function () {\n    var helpers = Test.Integration;\n\n    helpers.executeEvents = function (events, pane, data) {\n        TC.options.events = events;\n        TC.options.basePath = 'Integration/Panes';\n        $('#qunit-fixture').append('<div data-bind=\"pane: \\'' + pane + '\\', data: \\'' + data + '\\'\"></div>');\n        ko.applyBindings();\n    };\n\n    helpers.executeDefaultEvents = function (pane) {\n        helpers.executeEvents(TC.defaultOptions().events, pane);\n    };\n\n    helpers.createTestElement = function() {\n        $('#qunit-fixture').append('<div class=\"test\"/>');\n    };\n\n    helpers.testEventsUntil = function(event) {\n        var events = [];\n        var defaultEvents = TC.defaultOptions().events;\n        for (var i = 0; i < defaultEvents.length; i++) {\n            events.push(defaultEvents[i]);\n            if (defaultEvents[i] === event)\n                break;\n        }\n        TC.Events.spy = sinon.spy();\n        events.push('spy');\n        return events;\n    };\n\n    Test.raiseDocumentEvent = function(eventName, properties) {\n        var event;\n        if (document.createEvent) {\n            event = document.createEvent(\"Event\");\n            event.initEvent(eventName, true, false);\n        } else {\n            event = document.createEventObject();\n            event.eventType = eventName;\n        }\n\n        event.eventName = eventName;\n        $.extend(event, properties);\n\n        if (document.createEvent)\n            document.dispatchEvent(event);\n        else\n            document.fireEvent(\"on\" + eventName, event);\n    };\n})();\n\n//@ sourceURL=Tests/Integration/Infrastructure/helpers.js");
window.eval("Test.Integration.pubsubAsMock = function() {\n    Test.Integration.pubsub = function() {\n        var pubsub = { end: sinon.spy(), createLifetime: function () { return pubsub; } };\n        sinon.spy(pubsub, 'createLifetime');\n        return pubsub;\n    };\n};\n\nTest.Integration.pubsubAsTribe = function () {\n    Test.Integration.pubsub = function () {\n        return new Tribe.PubSub({ sync: true });\n    };\n};\n\nTest.Integration.pubsubAsMock();\n//@ sourceURL=Tests/Integration/Infrastructure/pubsub.js");
window.eval("Test.Unit.context = function () {\n    var template = '';\n    var context = {\n        loader: {\n            get: sinon.spy()\n        },\n        models: {\n            test: { constructor: sinon.spy() }\n        },\n        options: {\n            synchronous: true,\n            splitScripts: true,\n            basePath: '',\n            events: ['test']\n        },\n        templates: {\n            template: '',\n            store: sinon.spy(),\n            loaded: sinon.spy(),\n            render: function() {\n                $('#qunit-fixture').append(template);\n            }\n        },\n        setTemplate: function(value) {\n            template = value;\n        },\n        loadedPanes: {},\n        rootNode: null,\n        renderOperation: {\n            promise: $.Deferred(),\n            complete: function () { }\n        }\n    };\n    sinon.spy(context.templates, 'render');\n    return context;\n};\n//@ sourceURL=Tests/Unit/Infrastructure/context.js");
window.eval("Test.Unit.node = function () {\n    var pane = Test.pane();\n    return {\n        pane: pane,\n        path: pane.path,\n        children: [],\n        nodeForPath: function() { return this; }\n    };\n};\n//@ sourceURL=Tests/Unit/Infrastructure/node.js");
window.eval("Test.pane = function() {\n    return {\n        path: 'test',\n        element: '#qunit-fixture',\n        model: {\n            initialise: sinon.spy(),\n            paneRendered: sinon.spy()\n        },\n        startRender: function () { },\n        endRender: function () { },\n        dispose: function () { }\n    };\n}\n//@ sourceURL=Tests/Unit/Infrastructure/pane.js");
window.eval("(function() {\n    module('Unit.Utilities.bindingHandlers');\n\n    test(\"enterPressed executes callback when enter keyup event occurs in specified element, passing element value\", function () {\n        var element = $('<input/>').appendTo('#qunit-fixture');\n        var spy = sinon.spy();\n        ko.bindingHandlers.enterPressed.init(element[0], function () { return spy; });\n    \n        ok(spy.notCalled);\n        element.val('value');\n        element.trigger(keyEvent('keyup', 13));\n        ok(spy.calledOnce);\n        ok(spy.calledWithExactly('value'));\n    });\n    \n    function keyEvent(eventName, which) {\n        var event = jQuery.Event(eventName);\n        event.which = which;\n        return event;\n    }\n})();\n\n//@ sourceURL=Tests/Unit/Utilities/bindingHandlers.tests.js");
window.eval("module('Unit.Utilities.collections');\n\ntest(\"each executes iterator for each item of array, passing value and index\", function () {\n    var spy = sinon.spy();\n    T.each(['1', '2'], spy);\n    ok(spy.calledTwice);\n    equal(spy.firstCall.args[0], '1');\n    equal(spy.firstCall.args[1], 0);\n    equal(spy.secondCall.args[0], '2');\n    equal(spy.secondCall.args[1], 1);\n});\n\ntest(\"each executes iterator for each property of object, passing value and property name\", function () {\n    var spy = sinon.spy();\n    T.each({ test1: '1', test2: '2' }, spy);\n    ok(spy.calledTwice);\n    equal(spy.firstCall.args[0], '1');\n    equal(spy.firstCall.args[1], 'test1');\n    equal(spy.secondCall.args[0], '2');\n    equal(spy.secondCall.args[1], 'test2');\n});\n\ntest(\"map executes iterator for each item of array, passing value and index\", function () {\n    var spy = sinon.spy();\n    T.map(['1', '2'], spy);\n    ok(spy.calledTwice);\n    equal(spy.firstCall.args[0], '1');\n    equal(spy.firstCall.args[1], 0);\n    equal(spy.secondCall.args[0], '2');\n    equal(spy.secondCall.args[1], 1);\n});\n\ntest(\"map executes iterator for each property of object, passing value and property name\", function () {\n    var spy = sinon.spy();\n    T.map({ test1: '1', test2: '2' }, spy);\n    ok(spy.calledTwice);\n    equal(spy.firstCall.args[0], '1');\n    equal(spy.firstCall.args[1], 'test1');\n    equal(spy.secondCall.args[0], '2');\n    equal(spy.secondCall.args[1], 'test2');\n});\n\ntest(\"map does not flatten arrays\", function() {\n    var result = T.map([1, 2], function () { return [3, 4]; });\n    equal(result.length, 2);\n    deepEqual(result[0], [3, 4]);\n    deepEqual(result[1], [3, 4]);\n});\n\ntest(\"map returns empty array for undefined input\", function() {\n    var spy = sinon.spy();\n    deepEqual(T.map(undefined, spy), []);\n    ok(spy.notCalled);\n});\n\ntest(\"filter executes once for each item of array\", function() {\n    var spy = sinon.spy();\n    T.filter(['1', '2'], spy);\n    ok(spy.calledTwice);\n    equal(spy.firstCall.args[0], '1');\n    equal(spy.firstCall.args[1], 0);\n    equal(spy.secondCall.args[0], '2');\n    equal(spy.secondCall.args[1], 1);\n});\n\ntest(\"filter executes once for each property of object\", function () {\n    var spy = sinon.spy();\n    T.filter({ test1: '1', test2: '2' }, spy);\n    ok(spy.calledTwice);\n    equal(spy.firstCall.args[0], '1');\n    equal(spy.firstCall.args[1], 'test1');\n    equal(spy.secondCall.args[0], '2');\n    equal(spy.secondCall.args[1], 'test2');\n});\n\ntest(\"filter returns array of values filtered by iterator function\", function() {\n    var result = T.filter(['1', '2'], function (item) { return item !== '1'; });\n    equal(result.length, 1);\n    equal(result[0], '2');\n});\n\ntest(\"filter returns empty array for undefined input\", function () {\n    var spy = sinon.spy();\n    deepEqual(T.filter(undefined, spy), []);\n    ok(spy.notCalled);\n});\n//@ sourceURL=Tests/Unit/Utilities/collections.tests.js");
window.eval("module('Unit.Utilities.elementDestroyed');\n\ntest(\"promise resolves when element is removed using jQuery\", function () {\n    expect(1);\n    var element = $('<div/>').appendTo('#qunit-fixture');\n    $.when(TC.Utils.elementDestroyed(element)).done(function() {\n        ok(true);\n    });\n    element.remove();\n});\n\nasyncTest(\"promise resolves when element is removed using native functions\", function () {\n    expect(1);\n    var element = $('<div/>').appendTo('#qunit-fixture');\n    $.when(TC.Utils.elementDestroyed(element)).done(function () {\n        ok(true);\n        start();\n    });\n    element[0].parentNode.removeChild(element[0]);\n});\n\n//@ sourceURL=Tests/Unit/Utilities/elementDestroyed.tests.js");
window.eval("(function () {\n    module('Unit.Utilities.idGenerator');\n\n    test(\"idGenerator starts at 0 and generates sequential numbers\", function () {\n        var generator = TC.Utils.idGenerator();\n        equal(generator.next(), 0);\n        equal(generator.next(), 1);\n        equal(generator.next(), 2);\n        equal(generator.next(), 3);\n        equal(generator.next(), 4);\n    });\n\n    test(\"getUniqueId is a static generator\", function() {\n        equal(TC.Utils.getUniqueId(), 0);\n        equal(TC.Utils.getUniqueId(), 1);\n        equal(TC.Utils.getUniqueId(), 2);\n    });\n})();\n\n//@ sourceURL=Tests/Unit/Utilities/idGenerator.tests.js");
window.eval("(function () {\n    var deferreds;\n\n    module(\"Unit.Utilities.jquery.complete\", {\n        setup: function() { deferreds = [ $.Deferred(), $.Deferred() ]; }\n    });\n\n    test(\"complete resolves when at least one deferred resolves\", function () {\n        var result = $.complete(deferreds);\n        equal(result.state(), 'pending');\n        deferreds[0].reject();\n        equal(result.state(), 'pending');\n        deferreds[1].resolve();\n        equal(result.state(), 'resolved');\n    });\n\n    test(\"complete rejects when all passed deferreds reject\", function () {\n        var result = $.complete(deferreds);\n        equal(result.state(), 'pending');\n        deferreds[0].reject();\n        equal(result.state(), 'pending');\n        deferreds[1].reject();\n        equal(result.state(), 'rejected');\n    });\n})();\n\n//@ sourceURL=Tests/Unit/Utilities/jquery.complete.tests.js");
window.eval("(function() {\n    module('Unit.Utilities.nodes', {\n        setup: function () {\n            TC.Events.spy = sinon.spy();\n            TC.options.events = ['spy'];\n        }\n    });\n\n    test(\"createNode executes events specified in options with new node\", function () {\n        TC.createNode('#qunit-fixture');\n        ok(TC.Events.spy.calledOnce);\n        ok(pane());\n    });\n\n    test(\"appendNode appends wrapper to target element\", function() {\n        TC.appendNode('#qunit-fixture');\n        equal($('#qunit-fixture div').length, 1);\n    });\n\n    function pane() {\n        return TC.Events.spy.firstCall.args[0];\n    }\n})();\n\n//@ sourceURL=Tests/Unit/Utilities/nodes.tests.js");
window.eval("(function() {\n    var utils = TC.Utils;\n    module('Unit.Utilities.objects');\n\n    test(\"arguments.byConstructor\", function() {\n        var argsToPass = [\"\", {}, function() {\n        }, [], 2.2];\n\n        (function() {\n            var args = utils.arguments(arguments);\n            equal(args.string, argsToPass[0]);\n            equal(args.object, argsToPass[1]);\n            equal(args.function, argsToPass[2]);\n            equal(args.array, argsToPass[3]);\n            equal(args.number, argsToPass[4]);\n\n        }).apply(null, argsToPass);\n    });\n\n    test(\"removeItem removes matching item from array\", function() {\n        var array = [1, 2, 3];\n        utils.removeItem(array, 2);\n        deepEqual(array, [1, 3]);\n    });\n\n    test(\"removeItem does not affect array if item does not exist\", function() {\n        var array = [1, 2, 3];\n        utils.removeItem(array, 4);\n        deepEqual(array, [1, 2, 3]);\n    });\n\n    test(\"inheritOptions\", function() {\n        var source = { test1: 'test', test2: 2 };\n        equal(TC.Utils.inheritOptions(source, {}, ['test1']).test1, 'test');\n        equal(TC.Utils.inheritOptions(source, {}, ['test2']).test2, 2);\n        equal(TC.Utils.inheritOptions(source, {}, ['test1', 'test2', 'test3']).test3, undefined);\n    });\n\n    test(\"evaluateProperty\", function() {\n        var target = {\n            test1: {\n                test11: 'test',\n                test12: {\n                    test121: 'test'\n                }\n            },\n            test2: 'test'\n        };\n\n        equal(utils.evaluateProperty(target, ''), target);\n        equal(utils.evaluateProperty(target, 'test1'), target.test1);\n        equal(utils.evaluateProperty(target, 'test2'), 'test');\n        equal(utils.evaluateProperty(target, 'test1.test11'), 'test');\n        equal(utils.evaluateProperty(target, 'test1.test12.test121'), 'test');\n        equal(utils.evaluateProperty(target, '.test1'), target.test1);\n        equal(utils.evaluateProperty(target, 'test1.'), target.test1);\n        equal(utils.evaluateProperty(target, 'test1..test11'), 'test');\n\n    });\n})();\n//@ sourceURL=Tests/Unit/Utilities/objects.tests.js");
window.eval("(function () {\n    var utils = TC.Utils;\n    \n    module('Unit.Utilities.panes');\n\n    test(\"getPaneOptions\", function () {\n        deepEqual(utils.getPaneOptions('test'), { path: 'test' }, \"accepts string value as path\");\n        deepEqual(utils.getPaneOptions('test', { data: 'data' }), { path: 'test', data: 'data' }, \"accepts string value as path and merges other options\");\n        deepEqual(utils.getPaneOptions({ path: 'test' }), { path: 'test' }, \"accepts options object\");\n        deepEqual(utils.getPaneOptions({ path: 'test' }, { data: 'data' }), { path: 'test', data: 'data' }, \"accepts options object and merges other options\");\n    });\n})();\n\n//@ sourceURL=Tests/Unit/Utilities/panes.tests.js");
window.eval("(function () {\n    module(\"Unit.Utilities.Path\");\n\n    test('Path handles empty arguments', function () {\n        equal(TC.Path('').toString(), '');\n        equal(TC.Path(undefined).toString(), '');\n        equal(TC.Path(null).toString(), '');\n    });\n\n    test(\"withoutFilename\", function () {\n        equal(TC.Path(\"/folder/subfolder/filename.ext\").withoutFilename().toString(), \"/folder/subfolder/\", \"Path with slashes\");\n    });\n\n    test(\"filename\", function () {\n        equal(TC.Path(\"filename.ext\").filename().toString(), \"filename.ext\", \"Filename\");\n        equal(TC.Path(\"/filename.ext\").filename().toString(), \"filename.ext\", \"Root path filename\");\n        equal(TC.Path(\"/folder/subfolder/filename.ext\").filename().toString(), \"filename.ext\", \"Path with slashes\");\n    });\n\n    test(\"extension\", function () {\n        equal(TC.Path(\"filename.ext\").extension().toString(), \"ext\", \"Filename\");\n        equal(TC.Path(\"/filename.ext\").extension().toString(), \"ext\", \"Root path filename\");\n        equal(TC.Path(\"filename\").extension().toString(), \"\", \"Filename without extension\");\n        equal(TC.Path(\"/filename\").extension().toString(), \"\", \"Root path filename without extension\");\n        equal(TC.Path(\"filename.\").extension().toString(), \"\", \"Empty extension\");\n        equal(TC.Path(\"/folder/subfolder/filename.ext\").extension().toString(), \"ext\", \"Path with slashes\");\n    });\n\n    test(\"withoutExtension\", function () {\n        equal(TC.Path(\"filename.ext\").withoutExtension().toString(), \"filename\");\n        equal(TC.Path(\"filename\").withoutExtension().toString(), \"filename\");\n        equal(TC.Path(\"/test/filename.ext\").withoutExtension().toString(), \"/test/filename\");\n        equal(TC.Path(\"/test/filename\").withoutExtension().toString(), \"/test/filename\");\n        equal(TC.Path(\"/test/filename.ext\").filename().withoutExtension().toString(), \"filename\");\n        equal(TC.Path(\"/test/filename\").filename().withoutExtension().toString(), \"filename\");\n    });\n\n    test(\"Path objects can be concatenated with strings\", function () {\n        equal(TC.Path('/folder/filename.ext').withoutFilename() + 'new.ext', '/folder/new.ext');\n    });\n\n    test(\"isAbsolute\", function () {\n        ok(TC.Path(\"/test/\").isAbsolute());\n        ok(TC.Path(\"http://test/\").isAbsolute());\n        ok(!TC.Path(\"test/\").isAbsolute());\n        ok(!TC.Path(\"test.txt\").isAbsolute());\n        ok(!TC.Path(\"../test.txt\").isAbsolute());\n    });\n\n    test(\"makeAbsolute\", function () {\n        equal(TC.Path(\"/test\").makeAbsolute().toString(), \"/test\");\n        equal(TC.Path(\"test\").makeAbsolute().toString(), \"/test\");\n        equal(TC.Path(\"test.txt\").makeAbsolute().toString(), \"/test.txt\");\n        equal(TC.Path(\"test/test.txt\").makeAbsolute().toString(), \"/test/test.txt\");\n    });\n\n    test(\"makeRelative\", function () {\n        equal(TC.Path(\"test\").makeRelative().toString(), \"test\");\n        equal(TC.Path(\"/test\").makeRelative().toString(), \"test\");\n        equal(TC.Path(\"/test.txt\").makeRelative().toString(), \"test.txt\");\n        equal(TC.Path(\"/test/test.txt\").makeRelative().toString(), \"test/test.txt\");\n    });\n\n    test(\"normalise\", function () {\n        equal(TC.Path('test').toString(), 'test');\n        equal(TC.Path('../test').toString(), '../test');\n        equal(TC.Path('test1/../test2').toString(), 'test2');\n        equal(TC.Path('/test1/../test2').toString(), '/test2');\n        equal(TC.Path('/test1/../test2/../test3').toString(), '/test3');\n        equal(TC.Path('./test').toString(), 'test');\n        equal(TC.Path('test1/./test2').toString(), 'test1/test2');\n        equal(TC.Path('.././test1/../test2').toString(), '../test2');\n        equal(TC.Path('http://test//test.htm').toString(), 'http://test/test.htm');\n        equal(TC.Path('http://test///test//test.htm').toString(), 'http://test/test/test.htm');\n        equal(TC.Path('1///2//3/4/5').toString(), '1/2/3/4/5');\n    });\n\n    test(\"asPathIdentifier\", function () {\n        equal(TC.Path('test.txt').asMarkupIdentifier().toString(), 'test');\n        equal(TC.Path('test/test.txt').asMarkupIdentifier().toString(), 'test-test');\n    });\n\n    test(\"setExtension\", function() {\n        equal(TC.Path('/test/test').setExtension('js').toString(), '/test/test.js');\n        equal(TC.Path('/test/test.txt').setExtension('js').toString(), '/test/test.js');\n    });\n\n    test(\"combine\", function() {\n        equal(TC.Path('/test/').combine('/test.txt').toString(), '/test/test.txt');\n        equal(TC.Path('http://test/').combine('/test.txt').toString(), 'http://test/test.txt');\n        equal(TC.Path('/1/').combine('/2/').combine('/test.txt').toString(), '/1/2/test.txt');\n        equal(TC.Path('').combine('test.txt').toString(), 'test.txt');\n    });\n})();\n\n//@ sourceURL=Tests/Unit/Utilities/Path.tests.js");
window.eval("(function () {\n    var history;\n    var pushState;\n    var replaceState;\n\n    module('Unit.Types.History', {\n        setup: function () {\n            pushState = sinon.spy();\n            replaceState = sinon.spy();\n            history = new TC.Types.History({ pushState: pushState, replaceState: replaceState });\n        },\n        teardown: function () { history.dispose(); }\n    });\n\n    test(\"History pushes state onto stack when navigating event raised\", function () {\n        $(document).trigger('navigating', { options: 'test' });\n        ok(pushState.calledOnce);\n        equal(pushState.firstCall.args[0].options, '\\\"test\\\"');\n        equal(pushState.firstCall.args[0].id, 0);\n    });\n\n    test(\"History transitions last node when popstate event raised\", function () {\n        var node = { transitionTo: sinon.spy(), pane: {} };\n        $(document).trigger('navigating', { options: 'test', node: node });\n        Test.raiseDocumentEvent('popstate', { state: { id: 0, options: '\\\"test2\\\"' } });\n        ok(node.transitionTo.calledOnce);\n        equal(node.transitionTo.firstCall.args[0], 'test2');\n    });\n})();\n\n//@ sourceURL=Tests/Unit/Types/History.tests.js");
window.eval("(function() {\n    var resources;\n    var context;\n    \n    module(\"Unit.Types.Loader\", {\n        setup: function () {\n            context = Test.Unit.context();\n            resources = new TC.Types.Loader();\n        }\n    });\n\n    test(\"get should call handler for file extension from passed url\", function () {\n        var spy = sinon.spy();\n        TC.LoadHandlers.test = spy;\n        resources.get('test.test');\n        ok(spy.calledOnce);\n    });\n\n    test(\"get should call handler with url, resourcePath and context\", function () {\n        var spy = sinon.spy();\n        TC.LoadHandlers.test = spy;\n        resources.get('test.test', 'test/test', context);\n        ok(spy.calledOnce);\n        equal(spy.firstCall.args[0], 'test.test');\n        equal(spy.firstCall.args[1], 'test/test');\n        equal(spy.firstCall.args[2], context);\n    });\n\n    test(\"when passed the same url, get should return the same deferred from first call to handler\", function () {\n        var deferred = $.Deferred();\n        TC.LoadHandlers.test = sinon.stub().returns(deferred);\n        equal(resources.get('test.test'), deferred);\n        equal(resources.get('test.test'), deferred);\n    });\n\n    test(\"get should return null after deferred from first call to handler completes\", function () {\n        var deferred = $.Deferred();\n        TC.LoadHandlers.test = sinon.stub().returns(deferred);\n        equal(resources.get('test.test'), deferred);\n        deferred.resolve();\n        equal(resources.get('test.test'), null);\n    });\n\n    test(\"get should return null after deferred from first call to handler fails\", function () {\n        var deferred = $.Deferred();\n        TC.LoadHandlers.test = sinon.stub().returns(deferred);\n        equal(resources.get('test.test'), deferred);\n        deferred.reject();\n        equal(resources.get('test.test'), null);\n    });\n\n    test(\"get should return different deferred for each unique url\", function () {\n        TC.LoadHandlers.test = function () { return $.Deferred(); };\n        var result1 = resources.get('test1.test');\n        var result2 = resources.get('test2.test');\n        notEqual(result1, result2);\n    });\n})();\n\n//@ sourceURL=Tests/Unit/Types/Loader.tests.js");
window.eval("(function() {\n    var logger;\n\n    module(\"Unit.Types.Logger\", {\n        setup: function () {\n            TC.Loggers.test = sinon.spy();\n            logger = new TC.Types.Logger();\n            logger.setLogger('test');\n        }\n    });\n\n    test(\"logger is called with level and message\", function() {\n        logger.warn('test');\n        ok(TC.Loggers.test.calledOnce);\n        ok(TC.Loggers.test.calledWithExactly('warn', 'test'));\n    });\n\n    test(\"default log level logs everything\", function() {\n        logger.debug();\n        logger.info();\n        logger.warn();\n        logger.error();\n        equal(TC.Loggers.test.callCount, 4);\n    });\n\n    test(\"only levels equal or higher than the set value are logged\", function () {\n        logger.setLogLevel('warn');\n        logger.debug();\n        logger.info();\n        ok(TC.Loggers.test.notCalled);\n        logger.warn();\n        logger.error();\n        ok(TC.Loggers.test.calledTwice);\n    });\n})();\n//@ sourceURL=Tests/Unit/Types/Logger.tests.js");
window.eval("(function() {\n    var models;\n\n    module('Unit.Types.Models', {\n        setup: function() { models = new TC.Types.Models(); }\n    });\n\n    test(\"register stores model as property with constructor and options\", function () {\n        var constructor = function () { };\n        var options = {};\n        models.register('test', constructor, options);\n        equal(models.test.constructor, constructor);\n        equal(models.test.options, options);\n    });\n})();\n//@ sourceURL=Tests/Unit/Types/Models.tests.js");
window.eval("(function () {\n    module('Unit.Types.Node');\n\n    function pane(path, handlesNavigation) {\n        return new TC.Types.Pane({ path: path, handlesNavigation: handlesNavigation });\n    }\n\n    test(\"setPane makes path absolute and sets pane path from pane if no parent\", function() {\n        var node = new TC.Types.Node(null, pane('test'));\n        equal(node.pane.path, '/test');\n    });\n\n    test(\"setPane sets pane path from parent and relative pane path\", function () {\n        var parent = new TC.Types.Node(null, pane('/path/parent'));\n        var node = new TC.Types.Node(parent, pane('child'));\n        equal(node.pane.path, '/path/child');\n    });\n\n    test(\"setPane sets pane path from pane if path is absolute\", function () {\n        var parent = new TC.Types.Node(null, pane('/path/parent'));\n        var node = new TC.Types.Node(parent, pane('/root'));\n        equal(node.pane.path, '/root');\n    });\n\n    test(\"setPane unsets node on existing pane\", function () {\n        var existingPane = pane('test');\n        var node = new TC.Types.Node(null, existingPane);\n        node.setPane(new TC.Types.Pane(pane('test2')));\n        equal(existingPane.node, null);\n    });\n\n    test(\"setPane sets node.handlesNavigation from pane\", function() {\n        var node = new TC.Types.Node();\n        node.setPane(pane('', 'test'));\n        equal(node.handlesNavigation, 'test');\n    });\n\n    test(\"node root is set correctly\", function() {\n        var one = new TC.Types.Node(null, pane('one'));\n        var two = new TC.Types.Node(one, pane('two'));\n        var three = new TC.Types.Node(two, pane('three'));\n\n        equal(one.root, one);\n        equal(two.root, one);\n        equal(three.root, one);\n    });\n\n    test(\"dispose removes node from parent collection\", function() {\n        var parent = new TC.Types.Node(null, pane('parent'));\n        var child = new TC.Types.Node(parent, pane('child'));\n        equal(parent.children.length, 1);\n        child.dispose();\n        equal(parent.children.length, 0);\n    });\n\n    test(\"navigate inherits path from existing pane\", function () {\n        var node = new TC.Types.Node(null, pane('/path/node1'));\n        node.transitionTo = sinon.spy();\n        node.navigate('node2');\n        ok(node.transitionTo.calledOnce);\n        equal(node.transitionTo.firstCall.args[0].path, '/path/node2');\n    });\n\n    test(\"nodeForPath returns current node if skipPath is not specified\", function() {\n        var node1 = new TC.Types.Node(null, pane('/path1/node1'));\n        var node2 = new TC.Types.Node(node1, pane('/path2/node2'));\n        equal(node2.nodeForPath(), node2);\n    });\n\n    test(\"nodeForPath returns parent if skipPath is specified\", function() {\n        var node1 = new TC.Types.Node(null, pane('/path1/node1'));\n        var node2 = new TC.Types.Node(node1, pane('/path2/node2'));\n        node2.skipPath = true;\n        equal(node2.nodeForPath(), node1);\n    });\n\n    test(\"nodeForPath recurses, skipping nodes as specified\", function () {\n        var node1 = new TC.Types.Node(null, pane('/path1/node1'));\n        var node2 = new TC.Types.Node(node1, pane('/path2/node2'));\n        var node3 = new TC.Types.Node(node2, pane('/path2/node2'));\n        node2.skipPath = true;\n        node3.skipPath = true;\n        equal(node3.nodeForPath(), node1);\n    });\n})();\n//@ sourceURL=Tests/Unit/Types/Node.tests.js");
window.eval("(function () {\n    var operation;\n    \n    module(\"Unit.Types.Operation\", {\n        setup: function() { operation = new TC.Types.Operation(); }\n    });\n\n    test(\"operation resolves when single child completes\", function () {\n        operation.add(1);\n        equal(operation.promise.state(), 'pending');\n        operation.complete(1);\n        equal(operation.promise.state(), 'resolved');\n    });\n\n    test(\"operation resolves when two children complete\", function() {\n        operation.add(1);\n        operation.add(2);\n        operation.complete(1);\n        equal(operation.promise.state(), 'pending');\n        operation.complete(2);\n        equal(operation.promise.state(), 'resolved');\n    });\n})();\n\n//@ sourceURL=Tests/Unit/Types/Operation.tests.js");
window.eval("(function() {\n    module('Unit.Types.Pane');\n\n    test(\"inheritPathFrom inherits path if pane path is relative\", function () {\n        var pane = new TC.Types.Pane({ path: 'pane2' });\n        pane.inheritPathFrom(wrap({ path: '/Test/pane1' }));\n        equal(pane.path, '/Test/pane2');\n    });\n\n    test(\"inheritPathFrom doesn't inherit path if pane path is absolute\", function () {\n        var pane = new TC.Types.Pane({ path: '/pane2' });\n        pane.inheritPathFrom(wrap({ path: '/Test/pane1' }));\n        equal(pane.path, '/pane2');\n    });\n\n    test(\"inheritPathFrom sets child folders from relative pane path\", function () {\n        var pane = new TC.Types.Pane({ path: 'Test2/pane2' });\n        pane.inheritPathFrom(wrap({ path: '/Test/pane1' }));\n        equal(pane.path, '/Test/Test2/pane2');\n    });\n    \n    function wrap(pane) {\n        return {\n            nodeForPath: function() {\n                return { pane: pane };\n            }\n        };\n    }\n})();\n\n//@ sourceURL=Tests/Unit/Types/Pane.tests.js");
window.eval("(function () {\n    var events;\n    var pipeline;\n    var eventDeferred;\n    var context = {};\n\n    module(\"Unit.Types.Pipeline\", {\n        setup: function() {\n            events = testEvents();\n            pipeline = new TC.Types.Pipeline(events, context);\n        }\n    });\n\n    test(\"event handlers specified are called\", function () {\n        pipeline.execute(['null1']);\n        ok(events.null1.calledOnce);\n    });\n\n    test(\"event handlers are passed target and context\", function () {\n        var target = {};\n        pipeline.execute(['null1'], target);\n        ok(events.null1.calledWithExactly(target, context));\n    });\n\n    test(\"events returning null are executed synchronously\", function () {\n        pipeline.execute(['null1', 'null2']);\n        ok(events.null1.calledOnce);\n        ok(events.null2.calledOnce);\n    });\n\n    test(\"events are executed when previous event resolves\", function() {\n        pipeline.execute(['deferred', 'null1']);\n        ok(events.null1.notCalled);\n        eventDeferred.resolve();\n        ok(events.null1.calledOnce);\n    });\n\n    test(\"rejected events terminate pipeline execution\", function() {\n        pipeline.execute(['deferred', 'null1']);\n        eventDeferred.reject();\n        ok(events.null1.notCalled);\n    });\n\n    test(\"execute returns deferred that resolves on completion\", function() {\n        var deferred = pipeline.execute(['deferred']);\n        equal(deferred.state(), 'pending');\n        eventDeferred.resolve();\n        equal(deferred.state(), 'resolved');\n    });\n    \n    test(\"execute returns deferred that rejects on failure\", function () {\n        var deferred = pipeline.execute(['deferred']);\n        equal(deferred.state(), 'pending');\n        eventDeferred.reject();\n        equal(deferred.state(), 'rejected');\n    });\n\n    function testEvents() {\n        eventDeferred = $.Deferred();\n        \n        return {\n            null1: sinon.spy(),\n            null2: sinon.spy(),\n            deferred: sinon.stub().returns(eventDeferred),\n        };\n    }\n})();\n\n//@ sourceURL=Tests/Unit/Types/Pipeline.tests.js");
window.eval("(function () {\n    var pane;\n    var pubsub;\n    var spy;\n    \n    module('Unit.Types.Saga', {\n        setup: function() {\n            pubsub = new Tribe.PubSub({ sync: true });\n            pane = { pubsub: pubsub };\n            spy = sinon.spy();\n        }\n    });\n\n    test(\"handler is executed with correct arguments when topic is published\", function () {\n        var saga = new TC.Types.Saga(pane, { 'testTopic': spy }).start();\n        pubsub.publish('testTopic', 'data');\n\n        ok(spy.calledOnce);\n        equal(spy.firstCall.args[0], saga);\n        equal(spy.firstCall.args[1], 'data');\n        equal(spy.firstCall.args[2].data, 'data');\n    });\n\n    test(\"onstart handler is executed when saga is started\", function() {\n        var saga = new TC.Types.Saga(pane, { onstart: spy }, 'test');\n        ok(spy.notCalled);\n        saga.start();\n        ok(spy.calledOnce);\n        equal(spy.firstCall.args[0], saga);\n        equal(spy.firstCall.args[1], 'test');\n    });\n\n    test(\"onend handler is executed when saga is started\", function () {\n        var saga = new TC.Types.Saga(pane, { onend: spy }).start();\n        ok(spy.notCalled);\n        saga.end();\n        ok(spy.calledOnce);\n        equal(spy.firstCall.args[0], saga);\n    });\n\n    test(\"onstart and onend handlers are not executed when topics is published\", function () {\n        var saga = new TC.Types.Saga(pane, { onstart: spy, onend: spy }).start();\n        pubsub.publish('onstart');\n        pubsub.publish('onend');\n        ok(spy.calledOnce);\n    });\n\n    test(\"startChild starts child and adds to children\", function () {\n        var child = { onstart: sinon.spy() };\n        var saga = new TC.Types.Saga(pane);\n        saga.startChild(child);\n        ok(child.onstart.calledOnce);\n        equal(saga.children.length, 1);\n    });\n    \n    test(\"end calls end on any children\", function () {\n        var child = { onend: sinon.spy() };\n        var saga = new TC.Types.Saga(pane);\n        saga.startChild(child);\n        saga.end();\n        ok(child.onend.calledOnce);\n    });\n\n})();\n\n//@ sourceURL=Tests/Unit/Types/Saga.tests.js");
window.eval("(function () {\n    var templates;\n    \n    module('Unit.Types.Templates', {\n        setup: function () { templates = new TC.Types.Templates(); },\n        teardown: function () { $('head script[type=\"text/template\"]').remove(); }\n    });\n\n    test(\"store wraps template in script tag with resource path as id\", function() {\n        templates.store('<br/>', 'test');\n        equal($('head script#template-test').text(), '<br/>');\n    });\n\n    test(\"store appends multiple wrapped templates\", function () {\n        templates.store('<script type=\"text/template\" id=\"test1\">test1</script><script type=\"text/template\" id=\"test2\">test2</script>');\n        equal($('head script#test1').text(), 'test1');\n        equal($('head script#test2').text(), 'test2');\n    });\n\n    test(\"store ignores unwrapped templates\", function () {\n        templates.store('<script type=\"text/template\" id=\"test1\">test1</script>blah<br/><script type=\"text/template\" id=\"test2\">test2</script>');\n        equal($('head script#test1').text(), 'test1');\n        equal($('head script#test2').text(), 'test2');\n    });\n\n    test(\"render replaces content of target with stored template\", function () {\n        $('#qunit-fixture').text('previous');\n        templates.store('content', 'test');\n        templates.render('#qunit-fixture', 'test');\n        equal($('#qunit-fixture').text(), 'content');\n    });\n    \n    test(\"loaded returns true if template has been loaded for specified path\", function () {\n        templates.store('<br/>', 'test');\n        ok(templates.loaded('test'));\n    });\n})();\n//@ sourceURL=Tests/Unit/Types/Templates.tests.js");
window.eval("(function() {\n    var originalEval = $.globalEval;\n    var url = 'test.js';\n    var resourcePath = '/test';\n    var response = \"\";\n    var context;\n    \n    $.mockjax({\n        url: url,\n        response: function() { this.responseText = response; }\n    });\n    \n    module(\"Unit.LoadHandlers.scripts\", {\n        setup: function() {\n            context = Test.Unit.context();\n        },\n        teardown: function () { $.globalEval = originalEval; }\n    });\n\n    test(\"script handler returns promise object\", function() {\n        ok(TC.LoadHandlers.js(url, resourcePath, context).promise);\n    });\n\n    test(\"script handler executes globalEval with response\", function () {\n        $.globalEval = sinon.spy();\n        response = \"test\";\n        TC.LoadHandlers.js(url, resourcePath, context);\n        ok($.globalEval.calledOnce);\n        equal($.globalEval.firstCall.args[0].substring(0, response.length), response);\n    });\n\n    test(\"script handler appends sourceURL tag\", function () {\n        $.globalEval = sinon.spy();\n        response = \"test\";\n        TC.LoadHandlers.js(url, resourcePath, context);\n        ok($.globalEval.calledOnce);\n        equal($.globalEval.firstCall.args[0].substring(response.length + 1), \"//@ sourceURL=test.js\");\n    });\n\n    test(\"script handler splits scripts on sourceURL tag if option is set\", function() {\n        $.globalEval = sinon.spy();\n        response = \"test\\n//@ sourceURL=test.js\\ntest2\\n//@ sourceURL=test2.js\";\n        TC.LoadHandlers.js(url, resourcePath, context);\n\n        ok($.globalEval.calledTwice);\n        equal($.globalEval.firstCall.args[0].substring(0, 4), \"test\");\n        equal($.globalEval.secondCall.args[0].substring(1, 6), \"test2\"); // leading /n - should fix\n    });\n\n    test(\"script handler sets TC.scriptEnvironment before executing scripts\", function () {\n        expect(1);\n        response = \"equal(TC.scriptEnvironment.resourcePath, '\" + resourcePath + \"');\";\n        TC.LoadHandlers.js(url, resourcePath, context);\n    });\n\n    test(\"script handler clears TC.scriptEnvironment after executing scripts\", function () {\n        TC.LoadHandlers.js(url, resourcePath, context);\n        equal(TC.scriptEnvironment, undefined);\n    });\n})();\n\n//@ sourceURL=Tests/Unit/LoadHandlers/scripts.tests.js");
window.eval("(function() {\n    var url = 'test.css';\n    var resourcePath = '/test';\n    var response = \"\";\n    \n    $.mockjax({\n        url: url,\n        response: function() { this.responseText = response; }\n    });\n\n    module('Unit.LoadHandlers.stylesheets');\n    \n    test(\"stylesheet handler returns promise object\", function() {\n        ok(TC.LoadHandlers.css(url, resourcePath, Test.Unit.context()).promise);\n    });\n\n    test(\"stylesheet handler adds stylesheet to page header\", function () {\n        response = \"body{}\";\n        TC.LoadHandlers.css(url, resourcePath, Test.Unit.context());\n        equal($('head style').last().text(), response);\n    });\n\n    test(\"stylesheet is added with id of resource\", function () {\n        response = \"body{}\";\n        TC.LoadHandlers.css(url, resourcePath, Test.Unit.context());\n        equal($('head style#style--test').last().text(), response);\n    });\n})();\n\n//@ sourceURL=Tests/Unit/LoadHandlers/stylesheets.tests.js");
window.eval("(function() {\n    var url = 'test.htm';\n    var resourcePath = '/test';\n    var response = '<br/>';\n    var context;\n    \n    $.mockjax({\n        url: url,\n        response: function() { this.responseText = response; }\n    });\n\n    module('Unit.LoadHandlers.templates', {\n        setup: function () { context = Test.Unit.context(); }\n    });\n\n    test(\"template handler returns promise object\", function() {\n        ok(TC.LoadHandlers.htm(url, resourcePath, context).promise);\n    });\n\n    test(\"template is stored with resource path identifier\", function() {\n        TC.LoadHandlers.htm(url, resourcePath, context);\n        ok(context.templates.store.calledOnce);\n        ok(context.templates.store.calledWithExactly('<br/>', '/test'));\n    });\n})();\n\n//@ sourceURL=Tests/Unit/LoadHandlers/templates.tests.js");
window.eval("(function () {\n    var context;\n    \n    module(\"Unit.LoadStrategies.adhoc\", {\n        setup: function () { context = Test.Unit.context(); }\n    });\n\n    test(\"loader.get is called for each resource\", function () {\n        TC.LoadStrategies.adhoc({ path: 'new' }, context);\n        ok(context.loader.get.calledThrice);\n        ok(context.loader.get.firstCall.calledWithExactly('new.js', 'new', context));\n        ok(context.loader.get.secondCall.calledWithExactly('new.htm', 'new', context));\n        ok(context.loader.get.thirdCall.calledWithExactly('new.css', 'new', context));\n    });\n\n    test(\"loader.get is called with base path combined with pane path\", function () {\n        context = Test.Unit.context();\n        context.options.basePath = 'panes';\n        TC.LoadStrategies.adhoc({ path: 'test2' }, context);\n        ok(context.loader.get.firstCall.calledWithExactly('panes/test2.js', 'test2', context));\n    });\n\n    test(\"subsequent calls with the same path returns the same deferred object\", function () {\n        var deferred = $.Deferred();\n        context.loader.get = function() { return deferred; };\n        var result1 = TC.LoadStrategies.adhoc({ path: 'test' }, context);\n        var result2 = TC.LoadStrategies.adhoc({ path: 'test' }, context);\n        equal(result1, result2);\n    });\n\n    test(\"subsequent calls with the same path returns null after the deferred has been resolved\", function () {\n        var deferred = $.Deferred();\n        context.loader.get = function () { return deferred; };\n        TC.LoadStrategies.adhoc({ path: 'test' }, context);\n        deferred.resolve();\n        equal(TC.LoadStrategies.adhoc({ path: 'test' }, context), null);\n    });\n\n    test(\"subsequent calls with the same path returns null after the deferred has been rejected\", function () {\n        var deferred = $.Deferred();\n        context.loader.get = function () { return deferred; };\n        TC.LoadStrategies.adhoc({ path: 'test' }, context);\n        deferred.reject();\n        equal(TC.LoadStrategies.adhoc({ path: 'test' }, context), null);\n    });\n\n    test(\"loader.get is not called when model has been loaded\", function () {\n        TC.LoadStrategies.adhoc({ path: 'test' }, context);\n        ok(context.loader.get.notCalled);\n    });\n\n    test(\"loader.get is not called when template has been loaded\", function () {\n        context.templates.loaded = function() { return true; };\n        TC.LoadStrategies.adhoc({ path: 'new' }, context);\n        ok(context.loader.get.notCalled);\n    });\n})();\n//@ sourceURL=Tests/Unit/LoadStrategies/adhoc.tests.js");
window.eval("module('Unit.LoadStrategies.preloaded');\n\ntest(\"returns rejected promise if no resources have been loaded for the specified path\", function() {\n    var context = Test.Unit.context();\n    var promise = TC.LoadStrategies.preloaded({ path: 'test2' }, context);\n    equal(promise.state(), 'rejected');\n});\n//@ sourceURL=Tests/Unit/LoadStrategies/preloaded.tests.js");
window.eval("(function () {\n    var context;\n    var node;\n    \n    module(\"Unit.Events.createModel\", {\n        setup: function () {\n            context = Test.Unit.context();\n            pane = Test.Unit.node().pane;\n        }\n    });\n\n    test(\"model is created from stored constructor\", function () {\n        TC.Events.createModel(pane, context);\n        ok(context.models.test.constructor.calledOnce);\n    });\n\n    test(\"default model is created if no constructor defined\", function () {\n        context.models.test.constructor = null;\n        TC.Events.createModel(pane, context);\n        equal(pane.model.pane, pane);\n    });\n})();\n//@ sourceURL=Tests/Unit/Events/createModel.tests.js");
window.eval("(function () {\n    var pane, context;\n    \n    module(\"Unit.Events.renderComplete\", {\n        setup: function() {\n            pane = new TC.Types.Pane({ element: '#qunit-fixture', transition: 'test' });\n            pane.model = { renderComplete: sinon.spy() };\n            context = Test.Unit.context();\n            TC.Transitions.test = { in: sinon.spy() };\n        }\n    });\n\n    test(\"renderComplete calls transition.in with pane element\", function () {\n        TC.Events.renderComplete(pane, context);\n        ok(TC.Transitions.test.in.calledOnce);\n        equal(TC.Transitions.test.in.firstCall.args[0], pane.element);\n    });\n\n    test(\"renderComplete calls renderComplete on pane model\", function () {\n        TC.Events.renderComplete(pane, context);\n        ok(pane.model.renderComplete.calledOnce);\n    });\n\n    test(\"renderComplete resolves is.rendered on pane model\", function () {\n        equal(pane.is.rendered.state(), 'pending');\n        TC.Events.renderComplete(pane, context);\n        equal(pane.is.rendered.state(), 'resolved');\n    });\n\n    test(\"renderComplete raises renderComplete event on document, passing pane as data\", function () {\n        var spy = sinon.spy();\n        window.document.addEventListener(\"renderComplete\", spy);\n        TC.Events.renderComplete(pane, context);\n        ok(spy.calledOnce);\n        equal(spy.firstCall.args[0].data, pane);\n        window.document.removeEventListener(\"renderComplete\", spy);\n    });\n})();\n//@ sourceURL=Tests/Unit/Events/renderComplete.tests.js");
window.eval("(function () {\n    var node;\n    var context;\n\n    module(\"Unit.Events.renderPane\", {\n        setup: function () {\n            context = Test.Unit.context();\n            pane = Test.Unit.node().pane;\n            context.setTemplate('<div/>');\n        }\n    });\n\n    test(\"templates.render is called with identifier and element\", function () {\n        TC.Events.renderPane(pane, context);\n        ok(context.templates.render.calledOnce);\n        ok(context.templates.render.calledWithExactly(pane.element, 'test'));\n    });\n\n    test(\"bindings are applied to child elements of pane element\", function () {\n        TC.Events.renderPane(pane, context);\n        ok(ko.applyBindings.calledOnce);\n        ok(ko.applyBindings.calledWithExactly(pane.model, $('#qunit-fixture').children()[0]));\n    });\n\n    test(\"paneRendered function is called on the model\", function () {\n        TC.Events.renderPane(pane, context);\n        ok(pane.model.paneRendered.calledOnce);\n    });\n})();\n//@ sourceURL=Tests/Unit/Events/renderPane.tests.js");
window.eval("(function () {\n    var pane, node;\n    \n    module('Unit.transition', {\n        setup: function () {\n            Test.Integration.createTestElement();\n            TC.Transitions.test = { in: sinon.spy(), out: sinon.spy(), reverse: 'test2' };\n            TC.Transitions.test2 = { in: sinon.spy(), out: sinon.spy(), reverse: 'test' };\n            pane = new TC.Types.Pane({ transition: 'test', element: '.test' });\n            node = new TC.Types.Node(null, pane);\n        }\n    });\n\n    test(\"transition executes specified in transition against given element\", function () {\n        TC.transition('.test', 'test').in();\n        equal(TC.Transitions.test.in.firstCall.args[0], '.test');\n    });\n\n    test(\"transition executes specified out transition against given element\", function () {\n        TC.transition('.test', 'test').out();\n        equal(TC.Transitions.test.out.firstCall.args[0], '.test');\n    });\n\n    test(\"transition gets target element and transition from node\", function () {\n        TC.transition(node).in();\n        equal(TC.Transitions.test.in.firstCall.args[0], '.test');\n    });\n\n    test(\"transition gets target element and transition from pane\", function () {\n        TC.transition(pane).in();\n        equal(TC.Transitions.test.in.firstCall.args[0], '.test');\n    });\n\n    test(\"specifying transition as argument overrides pane transition\", function() {\n        TC.Transitions.test2 = { in: sinon.spy(), out: sinon.spy() };\n        TC.transition(pane, 'test2').in();\n        ok(TC.Transitions.test.in.notCalled);\n        ok(TC.Transitions.test2.in.calledOnce);\n    });\n\n    test(\"transitioning out removes element by default\", function () {\n        TC.transition('.test').out();\n        equal($('.test').length, 0);\n    });\n\n    test(\"transitioning out hides element if specified\", function () {\n        TC.transition('.test').out(false);\n        equal($('.test').length, 1);\n    });\n\n    test(\"reverse transition is executed when specified\", function() {\n        TC.transition('.test', 'test', true).in();\n        equal(TC.Transitions.test2.in.firstCall.args[0], '.test');\n\n    });\n})();\n\n//@ sourceURL=Tests/Unit/Transitions/transition.tests.js");
