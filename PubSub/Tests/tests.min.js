(function(){var n;module("core.publish",{setup:function(){n=new Tribe.PubSub}}),test("publish should call all subscribers for a message exactly once",function(){var t=sinon.spy(),i=sinon.spy();n.subscribe("0",t),n.subscribe("0",i),n.publishSync("0","test"),ok(t.calledOnce),ok(i.calledOnce)}),test("publish should only call subscribers of the published message",function(){var t=sinon.spy(),i=sinon.spy();n.subscribe("0",t),n.subscribe("1",i),n.publishSync("0","test"),ok(t.called),equal(i.callCount,0)}),test("publish should call subscribers with data as first argument",function(){var t=sinon.spy();n.subscribe("0",t),n.publishSync("0","1"),ok(t.calledWith("1"))}),test("publish should publish asynchronously",function(){var t=sinon.stub(window,"setTimeout"),i=sinon.spy();n.subscribe("0",i),n.publish("0","1"),ok(t.calledOnce),t.restore()}),test("publishSync should publish synchronously",function(){var t=sinon.stub(window,"setTimeout"),i=sinon.spy();n.subscribe("0",i),n.publishSync("0","1"),ok(t.notCalled),t.restore()}),test("publish accepts evelope as first parameter",function(){var t=sinon.spy();n.subscribe("testMessage",t),n.publish({topic:"testMessage",data:"test",sync:!0}),ok(t.calledWith("test"))})})(),function(){var n;module("core.subscribe",{setup:function(){n=new Tribe.PubSub}}),test("subscribe method should return different tokens",function(){var t=n.subscribe("0",function(){}),i=n.subscribe("1",function(){});notEqual(t,i)}),test("passing map of handlers to subscribe returns correct number of string tokens",function(){var t=n.subscribe({test:function(){},test2:function(){}});equal(t.length,2,"Return type has correct length"),ok(t[0].constructor===String),ok(t[1].constructor===String)}),test("passing map of handlers to subscribe correctly subscribes messages",function(){var t=sinon.spy(),i=sinon.spy();n.subscribe({test:t,test2:i}),n.publishSync("test"),ok(t.called,"First subscription successful"),n.publishSync("test2"),ok(i.called,"Second subscription successful")}),test("passing array of handlers to subscribe returns correct number of string tokens",function(){var t=n.subscribe(["test","test2"],function(){});equal(t.length,2,"Return type has correct length"),ok(t[0].constructor===String),ok(t[1].constructor===String)}),test("passing array of handlers to subscribe correctly subscribes messages",function(){var t=sinon.spy();n.subscribe(["test","test2"],t),n.publishSync("test"),n.publishSync("test2"),ok(t.calledTwice,"Both subscriptions triggered")})}(),function(){var n;module("core.unsubscribe",{setup:function(){n=new Tribe.PubSub}}),test("unsubscribe method should return token when successful",function(){var t=n.subscribe("0"),i=n.unsubscribe(t);equal(i,t)}),test("unsubscribe method should return false when unsuccesful",function(){var i=n.unsubscribe("0"),t;equal(i,!1),t=n.subscribe("0"),n.unsubscribe(t),equal(n.unsubscribe(t),!1)}),test("passing array of tokens to unsubscribe correctly unsubscribes messages",function(){var t=sinon.spy(),i=sinon.spy(),r=n.subscribe({test:t,test2:i});n.unsubscribe(r),n.publishSync("test"),ok(!t.called,"First subscription successful"),n.publishSync("test2"),ok(!i.called,"Second subscription successful")})}(),function(){function t(){throw"some error";}var n;module("exceptions",{setup:function(){n=new Tribe.PubSub}}),test("when handleExceptions is true, publishSync should call all subscribers, even if there are exceptions",function(){var i=sinon.spy();n.subscribe("0",t),n.subscribe("0",i),n.publishSync("0"),ok(i.called)}),test("when handleExceptions is true, exceptionHandler is called when exception occurs in subscriber",function(){var i=Tribe.PubSub.options.exceptionHandler;Tribe.PubSub.options.exceptionHandler=sinon.spy(),n.subscribe("0",t),n.publishSync("0"),ok(Tribe.PubSub.options.exceptionHandler.called),Tribe.PubSub.options.exceptionHandler=i}),test("when handleExceptions is false, exceptions thrown in subscribers will be unhandled",function(){Tribe.PubSub.options.handleExceptions=!1,raises(function(){n.subscribe("0",t),n.publishSync("0")}),Tribe.PubSub.options.handleExceptions=!0})}(),function(){var n;module("Lifetime",{setup:function(){n=new Tribe.PubSub}}),test("lifetime subscribers are called as normal",function(){var t=sinon.spy(),i=sinon.spy(),r;n.subscribe("0",t),r=n.createLifetime(),r.subscribe("0",i),n.publishSync("0"),ok(t.called),ok(i.called)}),test("lifetime subscribers are not called after end",function(){var i=sinon.spy(),r=sinon.spy(),t;n.subscribe("0",i),t=n.createLifetime(),t.subscribe("0",r),t.end(),n.publishSync("0"),ok(i.called),ok(r.notCalled)}),test("lifetime handles hash of subscribers",function(){var t=sinon.spy(),i=sinon.spy(),r=n.createLifetime();r.subscribe({"0":t,"1":i}),r.end(),n.publishSync("0"),n.publishSync("1"),ok(t.notCalled),ok(i.notCalled)}),test("messages published through lifetime are published to other subscribers",function(){var t=sinon.spy(),i;n.subscribe("0",t),i=n.createLifetime(),i.publishSync("0"),ok(t.calledOnce)}),test("nested lifetime subscribers are removed by parent",function(){var t=sinon.spy(),i=n.createLifetime(),r=i.createLifetime();r.subscribe("0",t),i.end(),n.publishSync("0"),ok(t.notCalled)}),test("parent lifetime subscribers are not removed by nested lifetimes",function(){var t=sinon.spy(),i=n.createLifetime(),r=i.createLifetime();i.subscribe("0",t),r.end(),n.publishSync("0"),ok(t.calledOnce)}),test("publishing through nested lifetimes triggers subscribers on owner",function(){var t=sinon.spy(),i,r;n.subscribe("0",t),i=n.createLifetime(),r=i.createLifetime(),r.publishSync("0"),ok(t.calledOnce)}),test("lifetime.owner returns containing PubSub object",function(){var t=n.createLifetime(),i=t.createLifetime();equal(t.owner,n),equal(i.owner,n)})}(),function(){var n;module("subscribeOnce",{setup:function(){n=new Tribe.PubSub}}),test("subscribeOnce publishes message to single subscriber only once",function(){var t=sinon.spy(),i=sinon.spy(),r=sinon.spy();n.subscribe("test",t),n.subscribeOnce("test",i),n.subscribe("test",r),n.publishSync("test"),n.publishSync("test"),ok(t.calledTwice),ok(i.calledOnce),ok(r.calledTwice)}),test("subscribeOnce publishes message to map of subscribers only once",function(){var t=sinon.spy();n.subscribeOnce({test1:t,test2:t}),n.publishSync("test1"),n.publishSync("test1"),n.publishSync("test2"),ok(t.calledOnce)}),test("subscribeOnce publishes message to array of subscribers only once",function(){var t=sinon.spy();n.subscribeOnce(["test1","test2"],t),n.publishSync("test1"),n.publishSync("test1"),n.publishSync("test2"),ok(t.calledOnce)}),test("subscribeOnce functions correctly in a lifetime",function(){var i=sinon.spy(),r=sinon.spy(),u=sinon.spy(),t;n.subscribe("test",i),t=n.createLifetime(),t.subscribeOnce("test",r),t.subscribe("test",u),n.publishSync("test"),n.publishSync("test"),t.end(),n.publishSync("test"),ok(i.calledThrice),ok(r.calledOnce),ok(u.calledTwice)})}(),function(){var n;module("SubscriberList",{setup:function(){n=new Tribe.PubSub.SubscriberList}}),test("add returns consecutive tokens",function(){equal(n.add(),"0"),equal(n.add(),"1")}),test("remove returns token if removed",function(){var t=n.add("0");equal(n.remove(t),t)}),test("remove returns false if not removed",function(){n.add("0"),equal(n.remove("1"),!1)}),test("get returns subscribers to specific topic",function(){n.add("0","0"),n.add("0","1"),n.add("2","2");var t=n.get("0");equal(t.length,2),equal(t[0].handler,"0"),equal(t[1].handler,"1")}),test("get includes global wildcard",function(){n.add("0","0"),n.add("*","1"),n.add("1","2");var t=n.get("0");equal(t.length,2),equal(t[0].handler,"0"),equal(t[1].handler,"1")}),test("global wildcard matches all topics",function(){n.add("*","1"),equal(n.get("0").length,1),equal(n.get("00").length,1),equal(n.get("0.0").length,1),equal(n.get("0.0.0").length,1)}),test("get includes child wildcard",function(){n.add("0.0","0"),n.add("0.*","1"),n.add("0.1","2");var t=n.get("0.0");equal(t.length,2),equal(t[0].handler,"0"),equal(t[1].handler,"1")}),test("get includes embedded wildcard",function(){n.add("0.0.0","0"),n.add("0.*.0","1"),n.add("0.1.0","2");var t=n.get("0.0.0");equal(t.length,2),equal(t[0].handler,"0"),equal(t[1].handler,"1")}),test("publish matches topics correctly",function(){n.add("test",{}),n.add("testtest",{}),n.add("1test",{}),n.add("test1",{}),n.add("1test1",{}),equal(n.get("test").length,1),equal(n.get("testtest").length,1),equal(n.get("1test").length,1),equal(n.get("test1").length,1),equal(n.get("1test1").length,1)})}(),function(){module("utils");var n=Tribe.PubSub.utils;test("each",function(){var t,i;n.each([1,2,3],function(n,t){equal(n,t+1,"each iterators provide value and iteration count")}),t=[],n.each([1,2,3],function(n){t.push(n*this.multiplier)},{multiplier:5}),equal(t.join(", "),"5, 10, 15","context object property accessed"),t=[],i={one:1,two:2,three:3},i.constructor.prototype.four=4,n.each(i,function(n,i){t.push(i)}),equal(t.join(", "),"one, two, three","iterating over objects works, and ignores the object prototype."),delete i.constructor.prototype.four,t=0,n.each(null,function(){++t}),equal(t,0,"handles a null properly")}),test("map",function(){var r=n.map([1,2,3],function(n){return n*2}),i,t;equal(r.join(", "),"2, 4, 6","doubled numbers"),i=n.map([1,2,3],function(n){return n*this.multiplier},{multiplier:3}),equal(i.join(", "),"3, 6, 9","tripled numbers with context"),t=n.map(null,function(){}),ok(n.isArray(t)&&t.length===0,"handles a null properly")})}();