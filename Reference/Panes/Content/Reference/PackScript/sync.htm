<div class="content block">
    <h1>sync(options[, options, ...])</h1>
    <p>
        The sync function is used to synchronise files from one location to another.
        The following options can be used:
    </p>
    <div data-bind="pane: '/Interface/API/propertyList', data: { properties: Reference.PackScript.sync }"></div>
    <p>
        Similar to the 
        <a data-bind="click: Article.show('Reference', 'PackScript/pack')">pack function</a>, 
        the sync function returns an object containing a function called 'to'.
    </p>

    <h2>Examples</h2>

    <p>This simple example keeps a local Libraries folder in sync with an external source.</p>
    <pre class="example">
sync('../../Libraries/*.js').to('Libraries');</pre>
    
    <p>You can keep a number of target folders synchronised.</p>
    <pre class="example">
sync('Libraries/*.js').to({
    'Site1/Scripts': { },
    'Site2/Scripts': { }
});</pre>

    <p>
        Here, we are keeping a master build folder synchronised with individual components.
        The folder structure underneath each included path is preserved.
    </p>
    <pre class="example">
sync({
    to: 'Build',
    include: [
        'Component1/Build/*.js',
        'Component2/Client/Build/*.js'
    ],
    exclude: 'debug.js',
    recursive: true
});</pre>
</div>
