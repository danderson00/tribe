<div class="content block">
    <h1>pack(options[, options, ...])</h1>
    <p>
        The pack function is used to combine and transform sets of files into a single output.
        The following options can be used:
    </p>
    <div data-bind="pane: '/Interface/API/propertyList', data: { properties: Reference.PackScript.pack }"></div>

    <pre class="example">
pack({
    to: 'Build/site.min.js',
    include: '*.js',
    exclude: 'debug.js',
    minify: true
});</pre>

    <p>You can also pass the pack function a string or an array. These are translated into the include option specified above.</p>
    <p>The pack function returns an object that exposes a function called 'to'.</p>

    <h2>to(options)</h2>
    <p>
        The to function attaches options to outputs defined by the preceding call to the pack function.
        It has two formats:
    </p>
    
    <pre class="example">
pack('*.js').to('combined.js');</pre>
    <p>Passing a string simply attaches a 'to' option to the existing output.</p>
    
    <pre class="example">
pack('*.js').to({
    'combined.js': { },
    'combined.min.js': { minify: true }
});</pre>
    <p>
        Passing a hashtable of paths and additional options creates multiple outputs. 
        The additional options are merged with those specified in the call to pack.
    </p>

    <h2>Examples</h2>
    <p>
        This example combines JavaScript files from the Scripts and Libraries folder into two files, 
        one simply combined and the other prepared for production. A template called license is applied
        to each file.
    </p>
    <pre class="example">
pack({
    include: [
        { files: 'Scripts/*.js', recursive: true },
        'Libraries/*.min.js'
    ],
    outputTemplate: 'license'
}).to({
    'Build/site.js': { },
    'Build/site.min.js': { minify: true, exclude: '*debug.js' }
});</pre>

    <p>
        This example embeds all panes, infrastructure scripts, additional templates and styles
        from their respective folders into a set of three files, combined, minified and a
        special debug mode.
    </p>
    <pre class="example">
pack({
    include: [
        T.panes('Panes'),
        T.scripts('Infrastructure'),
        T.templates('Templates'),
        T.styles('Styles')
    ],
    recursive: true
}).to({
    'Build/site.js': { },
    'Build/site.min.js': { minify: true }
    'Build/site.debug.js': { debug: true }
});</pre>
    <p>
        See the 
        <a data-bind="click: Article.show('Reference', 'PackScript/builtins')">
            built-in templates reference
        </a>
        for more information.
    </p>
</div>