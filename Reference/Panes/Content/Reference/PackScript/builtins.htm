<div class="content block">
    <h1>Built-in Functions and Templates</h1>
    <p>
        PackScript provides a number of built-in configuration functions and templates to make
        building and debugging your Tribe applications much easier.
    </p>
    <div data-bind="pane: '/Interface/API/table', data: Reference.PackScript.Builtin.functions"></div>
    
    <p>Each of these functions accepts the following arguments:</p>
    <div data-bind="pane: '/Interface/API/table', data: Reference.PackScript.Builtin.arguments"></div>

    <p>An object consisting of the following properties can be passed to these functions:</p>
    <div data-bind="pane: '/Interface/API/propertyList', data: { properties: Reference.PackScript.Builtin.options }"></div>
    
    <p>
        PackScript also provides a number of other helper functions that help you deal with different versions of files.
        Pass these functions a file path but omit the extension. The appropriate extensions will be added.
    </p>
    <div data-bind="pane: '/Interface/API/table', data: Reference.PackScript.Builtin.helpers"></div>
    
    <h2>Examples</h2>
    <p>
        A simple project structure. This creates three files, site.js, site.min.js and site.debug.js. 
        It merges in the appropriate version of a script located in the Libraries directory -
        either dependency.js, dependency.min.js or dependency.debug.js.
    </p>
    <pre class="example">
pack([
    T.panes('Panes'),
    T.scripts('Infrastructure'),
    T.templates('Templates'),
    T.styles('Css'),
    T.webDependency('Libraries/dependency')
]).to(T.webTargets('Build/site');</pre>
</div>