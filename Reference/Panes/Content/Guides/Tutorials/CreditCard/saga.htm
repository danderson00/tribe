<h2>Separating Navigation and Business Processes</h2>
<p>This time around, we'll separate the logic that manipulates our business object into a separate saga.</p>

<div data-bind="pane: '/Interface/sample', data: { name: 'CreditCard/3-Saga', initialFile: 'BusinessFlow.js', rootPane: 'welcome', handleNavigation: true }"></div>

<p>
    Our business customer flow is starting to look pretty nice. There's
    another flow helper in there, <span class="filename">endsAt</span>.
</p>
<p>
    You'll notice our flow is starting our 
    <span class="filename">CreditCard</span> saga. Additional arguments
    we specify here are passed to the saga's constructor. This saga's lifetime
    is bound to the flow and will end when the flow is ended.
</p>

<p>Looking at 
    <span class="filename">CreditCard.js</span>, you'll see the task of 
    maintaining our business object is neatly separated into it's own saga.
    This is a powerful design that allows business objects to be seamlessly 
    synchronised across multiple clients, both web and mobile, with Tribe.MessageHub.
</p>

<p>
    Flows give us some neat flexibility in how we structure our handlers.
    Next, we'll combine our personal and business customer flows into
    a single flow.
</p>
