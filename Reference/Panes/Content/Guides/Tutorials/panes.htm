<div class="content block">
    <h1>Creating Panes</h1>
    
    <p>
        Panes can consist of a JavaScript model, HTML template and CSS stylesheet. Creating new panes is as
        simple as creating files with corresponding extensions and referring to them by name.
    </p>
    
    <div data-bind="pane: '/Interface/sample', data: { name: 'Panes/Creating', initialFile: 'index.html', rootPane: { path: '/Samples/Panes/Creating/helloWorld', data: { message: 'Test message.' } } }"></div>
    
    <h2>Dynamically Injecting Panes</h2>
    <p>Panes can be injected into the DOM dynamically. Here, we are creating a new pane every time the button is clicked.</p>
    <div data-bind="pane: '/Interface/sample', data: { name: 'Panes/Dynamic', initialFile: 'create.js', rootPane: 'create' }"></div>
    <p>For a full list of API functions, check out the <a data-bind="click: Article.show('Reference', 'Core/api')">API reference</a>.</p>
</div>

<div class="content block">
    <h1>Communicating</h1>
    <p>
        Tribe provides a publish / subscribe engine for communication between panes and other components.
    </p>
    <p>
        Using messages to communicate allows you to create autonomous, loosely decoupled components that
        are extensible and easy to maintain.
    </p>
    <p>
        You can also share observable objects between panes.
    </p>
    <div data-bind="pane: '/Interface/sample', data: { name: 'Panes/Communicating', initialFile: 'sender.js', rootPane: 'layout' }"></div>
    <p>
        
    </p>
    <div data-bind="pane: '/Interface/tip', data: { tip: 'Use \'namespaces\' in your message topics to prevent collisions as your application expands.' }"></div>
</div>

<div class="content block">
    <h1>Pane Lifecycle</h1>
    <p>Each pane goes through a defined set of steps from ensuring resources are loaded, rendering and binding panes through to disposal.</p>
    <p>You can perform actions when some of these events occur by declaring functions on your model.</p>
    <div data-bind="pane: '/Interface/sample', data: { name: 'Panes/Lifecycle', initialFile: 'item.js', rootPane: 'create' }"></div>
    <p>
        For a full description of the pane lifecycle and events you can hook in to, check out the 
        <a data-bind="click: Article.show('Reference', 'Core/panes')">panes reference</a>.
    </p>
</div>

<div class="content block">
    <h1>Navigating</h1>
    <p>The Tribe navigation mechanism gives you a simple way to transition panes using smooth, hardware accelerated CSS transitions.</p>
    <p>A navigation stack is maintained, allowing you to navigate back and forth through the stack.</p>
    <div data-bind="pane: '/Interface/sample', data: { name: 'Panes/Navigating', initialFile: 'layout.htm', rootPane: 'layout' }"></div>
    <p>
        You can easily hook into the browser history and provide custom URLs. See the 
        <a data-bind="click: Article.show('Reference', 'Core/panes')">panes reference</a> for more information.
    </p>
    <p>
        Any element or pane can be transitioned. See the 
        <a data-bind="click: Article.show('Reference', 'Core/transitions')">transitions reference</a> for more information.
    </p>
</div>

