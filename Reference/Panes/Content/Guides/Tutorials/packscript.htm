<div class="content block">
    <img src="Images/logo.packscript.gif" class="logo" />

    <iframe src="http://ghbtns.com/github-btn.html?user=danderson00&repo=PackScript&type=watch" allowtransparency="true" frameborder="0" scrolling="0" width="62" height="20"></iframe>
    <iframe src="http://ghbtns.com/github-btn.html?user=danderson00&repo=PackScript&type=fork" allowtransparency="true" frameborder="0" scrolling="0" width="62" height="20"></iframe>

    <p>
        PackScript is a powerful open source (<a href="http://opensource.org/licenses/mit-license.php" target="_blank">MIT license</a>) 
        resource build system that combines, minifies and transforms your JavaScript, HTML and CSS files based on JavaScript configuration files.
    </p>

    <p>
        PackScript contains APIs to minify JavaScript, synchronise files, create ZIP files, compile SASS and apply XDT transformations
        and is easy to extend with both JavaScript and .NET.
    </p>

    <p>Using PackScript is as simple as creating files named <span class="filename">pack.js</span> that contain intuitive commands.</p>
    <pre class="example">
pack('Scripts/*.js').to('site.js');</pre>
    
    <pre class="example">
pack({
    to: 'site.js',
    include: ['Scripts/*.js', 'Libraries/*.js'],
    exclude: '*.debug.js',
    recursive: true,
    minify: true
});</pre>

    <p>PackScript can easily create multiple versions of your files for production and development scenarios.</p>
    <pre class="example">
pack({
    include: ['Scripts/*.js', 'Libraries/*.js'],
    recursive: true
}).to({
    'site.js': { exclude: '*.debug', minify: true },
    'site.debug.js': { template: 'embedPath' },
});</pre>
    
    <p>
        Transform your files with <a href="http://underscorejs.org/#template" target="_blank">underscore.js templates</a>, 
        allowing you to enhance your debugging experience, embed stylesheets and templates and much more - any transformation you can think of.
    </p>
    
    <p>Creating a template is as simple as creating a file that matches the pattern <span class="filename">*.template.*</span>.</p>
    
    <p>Let's create the 'embedPath' template from the example above. Create a file called <span class="filename">embedPath.template.js</span>:</p>
    <pre class="example">
// <%= pathRelativeToConfig %>
<%= content %>
</pre>
    
    <p>Now each file will have a simple header containing the original path of the script, making it much easier to debug.</p>
    
    <p>Configuration is pure JavaScript - you can create variables and functions to reuse configuration and create conventions.</p> 
    
    <p>PackScript comes with a number of built-in functions and templates to greatly simplify the packaging of your application.</p>
    
    <pre class="example">
pack([
    T.panes('Panes'),
    T.scripts('Infrastructure'),
    T.styles('Styles'),
    T.templates('Templates')
]).to(T.webTargets('Build/site');
</pre>
    
    <p>
        This example creates a set of three files, site.js, site.min.js and site.debug.js, a special debug version that recreates your
        filesystem in supported browsers (Google Chrome and partial support for FireFox). Each file contains embedded Tribe panes, 
        infrastructure scripts, CSS and HTML templates.
    </p>

    <p>For more information, see the <a data-bind="click: Article.show('Reference', 'PackScript/builtins')">built-in functions reference</a>.</p>
    
    <p>
        For a complete reference check out the <a data-bind="click: Article.show('Reference', 'PackScript/operation')">PackScript reference</a> or 
        <a href="http://packscript.com/" target="_blank">http://packscript.com/</a>.
    </p>
</div>