
window.eval("\nif (typeof (T) == 'undefined') T = {};\nT.Types = T.Types || {};\n\n//@ sourceURL=tribe://Tribe.Node/Source/Client/setup.js");


window.eval("\n(function () {\n    Tribe.PubSub.prototype.startSaga = function (id, path, data) {\n        if (path.charAt(0) !== '/')\n            path = '/' + path;\n\n        var saga = new Tribe.PubSub.Saga(this, sagaDefinition(path));\n        saga.id = id;\n\n        attachToHub(saga);\n\n        T.hub.startSaga(path, id, data);\n\n        return saga.start(data);\n    };\n\n    Tribe.PubSub.prototype.joinSaga = function (id, path, data) {\n        var deferred = $.Deferred();\n        var self = this;\n        $.when($.get('/Data/' + id + '/' + id))\n            .done(function (data) {\n                var saga = new Tribe.PubSub.Saga(self, sagaDefinition(data.path));\n                saga.id = id;\n                saga.join(T.serializer.deserialize(data.data));\n                attachToHub(saga);\n                deferred.resolve(saga);\n            })\n            .fail(function (reason) {\n                if (reason.status === 404 && path) {\n                    var saga = self.startSaga(id, path, data);\n                    deferred.resolve(saga);\n                }\n                else deferred.reject(reason);\n\n            });\n        return deferred;\n    };\n\n    function sagaDefinition(path) {\n        return TC.context().sagas[path].constructor;\n    }\n\n    // need to also be able to detach\n    function attachToHub(saga) {\n        T.hub.join(saga.id);\n        saga.pubsub.subscribe(saga.topics, function (message, envelope) {\n            envelope.sagaId = saga.id;\n            T.hub.publish(envelope);\n        });\n    }\n\n    Tribe.PubSub.Lifetime.prototype.startSaga = Tribe.PubSub.prototype.startSaga;\n    Tribe.PubSub.Lifetime.prototype.joinSaga = Tribe.PubSub.prototype.joinSaga;\n\n    Tribe.PubSub.Channel.prototype.connect = function (topics) {\n        var self = this;\n\n        T.hub.join(this.id);\n        this.subscribe(topics || '*', function(data, envelope) {\n            T.hub.publish(envelope);\n        });\n\n        var end = this.end;\n        this.end = function() {\n            T.hub.leave(self.channelId);\n            end();\n        };\n\n        return this;\n    };\n})();\n\n//@ sourceURL=tribe://Tribe.Node/Source/Client/PubSub.extensions.js");


window.eval("\nT.Types.Hub = function (io, pubsub, options) {\n    var socket = io.connect(options.socketUrl);\n\n    socket.on('message', function (envelope) {\n        envelope.origin = 'server';\n        pubsub.publish(envelope);\n    });\n\n    this.publish = function(envelope) {\n        if (!socket)\n            throw 'Hub must be connected before calling publish';\n        if(envelope.origin !== 'server')\n            socket.emit('message', envelope);\n    };\n\n    this.join = function(channel) {\n        socket.emit('join', channel);\n    };\n\n    this.startSaga = function(path, id, data) {\n        socket.emit('startSaga', { path: path, id: id, data: data });\n    };\n};\n//@ sourceURL=tribe://Tribe.Node/Source/Client/Types/Hub.js");
