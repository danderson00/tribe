var Q = require('q');

suite('tribe.build', function () {
    var build, activities, spy1, spy2;

    // require.refresh only kicks in for the test, not setup. Something to fix...
    function refreshBuild() {
        require.refresh('tribe/build');
        require.refresh('tribe/build/activities');
        build = require('tribe/build');
        activities = require('tribe/build/activities');
        spy1 = sinon.spy();
        spy2 = sinon.spy();
    }

    test("build executes step factory for each step", function () {
        refreshBuild();
        activities.register('test', spy1);

        build.configure({ tasks: [{ activity: 'test' }, { activity: 'test' }] });
        expect(spy1.calledTwice).to.be.true;
    });

    test("build executes each phase on specified activities", function () {
        refreshBuild();
        activities.register('test', function () {
            return { phase1: spy1, phase2: spy2 };
        });
        build.configure({ tasks: [{ activity: 'test' }, { activity: 'test' }], phases: ['phase1', 'phase2'] });

        return build.execute().then(function () {
            expect(spy1.calledTwice).to.be.true;
            expect(spy2.calledTwice).to.be.true;
        });
    });

    test("build passes options to activities", function () {
        refreshBuild();
        activities.register('test', function (options) {
            return {
                phase: function (context) { context.test = options; }
            };
        });
        build.configure({ tasks: [{ activity: 'test', options: 'test' }], phases: ['phase'] });

        var context = {};
        return build.execute(context).then(function () {
            expect(context.test).to.equal('test');
        })
    });

    test("build passes context to tasks", function () {
        refreshBuild();
        activities.register('test', function () {
            return {
                phase: function (context) { context.test = 'test'; }
            };
        });
        build.configure({ tasks: [{ activity: 'test' }], phases: ['phase'] });

        var context = {};
        return build.execute(context).then(function () {
            expect(context.test).to.equal('test');
        })
    });

    test("build executes phases in order", function () {
        refreshBuild();
        activities.register('test', function (options) {
            return {
                phase1: function (context) { context.test += options + '1 '; },
                phase2: function (context) { context.test += options + '2 '; }
            };
        });
        build.configure({ tasks: [{ activity: 'test', options: '1' }, { activity: 'test', options: '2' }], phases: ['phase1', 'phase2'] });

        var context = { test: '' };
        return build.execute(context).then(function () {
            expect(context.test).to.equal('11 21 12 22 ');
        });
    });

    test("build waits for promises to be resolved", function () {
        refreshBuild();
        var deferred = Q.defer();

        activities.register('test', function (options) {
            return {
                phase1: function () { return deferred; },
                phase2: function () { context.test = true; }
            };
        });
        build.configure({ tasks: [{ activity: 'test' }], phases: ['phase1', 'phase2'] });

        var context = { };
        return build.execute(context).then(function () {
            expect(context.test).to.be.true;
        });

        setTimeout(function () {
            expect(context.test).to.be.undefined;
            deferred.resolve();
        }, 0);
    });
});