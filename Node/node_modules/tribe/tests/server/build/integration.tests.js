var options = require('tribe/options'),
    path = require('path'),
    fs = require('fs'),
    context;

suite('tribe.build.integration', function () {
    test("app is built", function () {
        options.basePath = path.resolve(__dirname, '../../files/build/') + '\\';
        context = {};

        // do we need these?
        //require.refresh('tribe/build');
        //require.refresh(/^tribe\/build\/activities/);

        var build = require('tribe/build');
        build.activities.loadBuiltin();
        build.configure({
            path: 'output',
            phases: ['prepare', 'render', 'server'],
            tasks: [
                { activity: 'app' },
                { activity: 'bootstrapper' },
                { activity: 'css' },
                { activity: 'dependencies', options: { path: 'dependencies' } },
                { activity: 'panes', options: { path: 'panes' } },
                { activity: 'resources', options: { path: 'resources' } },
                { activity: 'scripts', options: { path: 'scripts' } },
                { activity: 'styles', options: { path: 'styles' } },
                { activity: 'templates', options: { path: 'templates' } }
            ]
        });
        return build.execute(context)
            .then(function () {
                var js = output('app.js'),
                    css = output('app.css'),
                    html = output('app.htm');

                expect(js).to.have.string('//pane');
                expect(js).to.have.string('//resource');
                expect(js).to.have.string('//script');
                expect(js).to.have.string('saga: T.registerSaga');

                expect(css).to.have.string('/*pane*/');
                expect(css).to.have.string('/*style*/');

                expect(html).to.have.string('src="dependencies/dependency.js"');
                expect(html).to.have.string('id="--template-pane"');
                expect(html).to.have.string('id="--template-template"');

                expect(isLoaded('resources/resource.js')).to.be.true;

                expect(context.dependencies.length).to.equal(1);
                expect(context.js.length).to.equal(3);
                expect(context.css.length).to.equal(2);
                expect(context.html.length).to.equal(2);
            });
    })
});

function output(file) {
    return fs.readFileSync(path.resolve(__dirname, '../../files/build/output', file)).toString();
}

function isLoaded(file) {
    return require.cache.hasOwnProperty(path.resolve(__dirname, '../../files/build', file));
}