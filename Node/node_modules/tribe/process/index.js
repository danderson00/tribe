var Module = require('module'),
    cp = require('child_process'),
    options = require('tribe/options'),
    utils = require('tribe/utilities'),
    pubsub = require('tribe.pubsub').createLifetime(),
    log = require('tribe/logger'),
    _ = require('underscore');

module.exports = {
    start: function (path, channel, debugPort) {
        // resolve the target path using the calling module to preserve module paths
        var resolvedPath = Module._resolveFilename(path, module.parent),
            args = [],
            child;

        if (debugPort) args.push('--debug=' + debugPort);
        args.push(require.resolve('./bootstrapper'));
        args.push(resolvedPath);
        args.push(JSON.stringify(options));

        pubsub.subscribe('*', publishMessageToChild);

        startProcess();

        return {
            end: endProcess,
            restart: startProcess
        };

        function startProcess() {
            endProcess();
            child = cp.spawn(process.execPath, args, { stdio: ['pipe', 'pipe', 'pipe', 'ipc'] });
            child.on('message', publishChildMessage);
            child.on('exit', cleanUp);
            child.stdout.on('data', logMessages);
            child.stderr.on('data', logMessages);

            function logMessages(data) {
                _.each(data.toString().split('\n'), function (message) {
                    if (message)
                        log.log(message, '(' + path + ':' + child.pid + ')');
                });
            }
        }

        function endProcess() {
            if(child) child.kill();
        }

        function publishChildMessage(envelope) {
            envelope.channelId = channel;
            pubsub.publish(envelope);
        }

        function publishMessageToChild(data, envelope) {
            if (child && child.connected && envelope.channelId === channel)
                child.send(utils.prepareEnvelope(envelope));
        }

        function cleanUp() {
            log.info('Process for ' + path + ' exited.');
        } 
    }
};
