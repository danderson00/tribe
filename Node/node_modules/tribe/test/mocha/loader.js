var Mocha = require('mocha'),
    load = require('tribe/load'),
    log = require('tribe/logger'),
    channels = require('tribe/server/channels'),
    testRequire = require('tribe/test/require'),
    convert = require('./convert'),
    chai = require('chai'),
    sinon = require('sinon'),
    _ = require('underscore'),
    files = {};

module.exports = {
    loadFile: function (mocha, path, debugPath) {
        var context = {},
            originalTests = files[path] || {},
            originalAddTest;

        files[path] = [];

        // loads up the context object with the selected mocha interface
        mocha.suite.emit('pre-require', context, path, mocha);

        return load.file({
            path: path,
            debugPath: debugPath,
            debugDomain: 'Tests',
            args: { context: context, expect: chai.expect, assert: chai.assert, sinon: sinon },
            requireExtensions: { stub: testRequire.stub, forceRefresh: testRequire.forceRefresh },
            withArg: 'context',
            beforeExecute: override,
            afterExecute: restore
        }).fail(broadcastError);

        function override() {
            originalAddTest = Mocha.Suite.prototype.addTest;
            Mocha.Suite.prototype.addTest = function (test) {
                var existingTest = _.findWhere(this.tests, { title: test.title });
                if(existingTest)
                    this.tests.splice(this.tests.indexOf(existingTest), 1);

                originalAddTest.call(this, test)

                // we can add the line number of the test from the stack trace
                // use this for setting breakpoints for individual tests automatically
                test.filename = path;
                files[path][test.title] = test;

                broadcastEvent('test.loaded', test);
                log.debug('Loaded test "' + test.title + '" from ' + path);
            };
        }

        function restore() {
            Mocha.Suite.prototype.addTest = originalAddTest;

            _.each(originalTests, function (test) {
                if (!files[path][test.title])
                    broadcastEvent('test.removed', test);
            });
        }

        function broadcastError(error) {
            log.error('Error loading test file ' + path, error);
            channels.broadcastTo('__test', { topic: 'test.error', data: log.errorDetails(error) });
        }
    },
    loadDirectory: function (mocha, path) {
        return load.enumerate(path, function (filePath, debugPath) {
            return module.exports.loadFile(mocha, filePath, debugPath);
        });
    },
    removeFile: function (mocha, path) {
        _.each(files[path], function (test) {
            broadcastEvent('test.removed', test);
        });
        delete files[path];
    }
}

function broadcastEvent(topic, test, error) {
    channels.broadcastTo('__test', { topic: topic, data: convert.test(test, error) });
}