var options = require('tribe/options'),
    browserify = require('browserify'),
    through = require('through'),
    fs = require('fs'),
    Q = require('q'),
    _ = require('underscore');

module.exports = function (property) {
    return {
        to: function (targetPath) {
            return function (context) {
                var b = browserify(),
                    q = Q.defer();

                try {
                    _.each(context[property], function (file) {
                        b.add(file);
                    });
                    b.require('tribe/register.client', { expose: 'tribe/register' });
                    b.transform(setScriptEnvironment);

                    var readStream = b.bundle({ debug: options.debug });

                    if (targetPath) {
                        var writeStream = fs.createWriteStream(targetPath);
                        stream.on('close', q.resolve);
                        readStream.pipe(writeStream);
                    } else {
                        // if we don't have a target, return the result through the promise. Makes testing much easier!
                        var content = '';
                        readStream.on('data', function (data) {
                            content += data;
                        });
                        readStream.on('end', function () {
                            q.resolve(content);
                        });
                    }

                    // need to minify with uglify-js if not in debug mode here...
                } catch (ex) {
                    q.reject(ex);
                }
                
                return q.promise;

                function setScriptEnvironment(file) {
                    var data = '';
                    return through(write, end);

                    function write(buf) { data += buf; }
                    function end() {
                        //return "T.scriptEnvironment = { resourcePath: '" + Path((prefix || '') + '/' + resourcePath).withoutExtension().makeAbsolute() + "' };";
                        this.queue("T.scriptEnvironment = { resourcePath: '/" + file.substring(0, file.lastIndexOf('.')) + "' };\n");
                        this.queue(data);
                        this.queue(null);
                    }
                }
            };
        }
    };
};