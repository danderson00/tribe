var utils = require('tribe/utilities'),
    options = require('tribe/options'),
    browserify = require('browserify'),
    path = require('path'),
    fs = require('fs'),
    Q = require('q'),
    _ = require('underscore');

module.exports = function (property, configCallback) {
    var render = {
        to: function (targetPath) {
            return function (context) {
                var b = browserify(),
                    q = Q.defer();

                try {
                    if (configCallback) configCallback(b, context[property]);

                    _.each(context[property], function (file) {
                        b.add(file.path);
                    });

                    var readStream = b.bundle({ debug: options.debug });

                    if (targetPath) {
                        var writeStream = fs.createWriteStream(utils.paths.resolveAppPath(targetPath));
                        writeStream.on('close', function () {
                            q.resolve();
                        });
                        readStream.pipe(writeStream);
                    } else {
                        // if we don't have a target, return the result through the promise. Makes testing much easier!
                        var content = '';
                        readStream.on('data', function (data) {
                            content += data;
                        });
                        readStream.on('end', function () {
                            q.resolve(content);
                        });
                    }

                    // need to minify with uglify-js if not in debug mode here...
                } catch (ex) {
                    q.reject(ex);
                }
                
                return q.promise;

            };
        },
        toBuild: function (filename) {
            return function (context, options) {
                return render.to(path.join(options.buildPath, filename))(context);
            };
        }
    };
    return render;
};
