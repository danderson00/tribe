var activities = require('tribe/build/activities'),
    blocks = require('tribe/build/blocks'),
    templates = require('tribe/build/templates'),
    utils = require('tribe/utilities'),
    tribeOptions = require('tribe/options'),
    log = require('tribe/logger'),
    path = require('path'),
    Q = require('q'),
    _ = require('underscore'),

    tasks = [],
    options = {};

module.exports = {
/*  buildOptions: {
        tasks: [{ activity: 'activity_name', options: { } }, ...],
        phases: ['build', 'phases', ...],
        path: 'target/path'
*///} 
    configure: function (buildOptions) {
        activities.loadBuiltin();
        tasks = _.map(buildOptions.tasks, activities.createTask);
        options = {
            phases: buildOptions.phases || [],
            buildPath: buildOptions.path
        };
        return module.exports;
    },

    addTask: function (activity, options) {
        tasks.push(activities.createTask({ activity: activity, options: options }));
    },

    execute: function (context) {
        log.debug('Building from ' + tribeOptions.basePath);

        context = context || {};

        return _.reduce(options.phases, function (previousPhase, phase) {
            return Q.when(previousPhase).then(function () {
                return _.reduce(tasks, function (previousTask, task) {
                    return Q.when(previousTask).then(function () {
                        return task[phase] && task[phase](context, options);
                    });
                }, null);
            });
        }, null).fail(utils.rethrow('Build failed!'));
    },

    tasks: tasks,
    activities: activities,
    blocks: blocks,
    templates: templates
};
