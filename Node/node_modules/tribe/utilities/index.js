var files = require('./files'),
    paths = require('./paths'),
    watcher = require('./watcher'),
    log = require('tribe/logger'),
    _ = require('underscore');

module.exports = {
    ensureTrailingSlash: function (path) {
        return path.charAt(path.length - 1) === '/' ? path : path + '/';
    },
    rethrow: function (message) {
        return function (inner) {
            var error = new Error(message);
            error.inner = inner;
            log.error('Rethrowing:', error);
            throw error;
        };
    },
    extractError: function (ex) {
        return ex && ex.constructor === String ?
            { message: ex } :
            {
                message: ex.message,
                name: ex.name,
                stack: ex.stack,
                inner: extractError(ex.inner)
            };
    },
    clearCache: function (path) {
        delete require.cache[fixPath(path)];
        delete require.cache[fixPath(path, true)];
    },
    // this omits properties that we don't want sent to the client
    // this originally came about by setting an origin property to a Socket object
    // JSON.stringify barfs. Thought about assigning a uuid to each socket
    // but do we really want to send that to the client? Security?
    // There will likely be other properties crop up, maybe encapsulate these in a single object?
    prepareEnvelope: function (envelope) {
        return _.omit(envelope, '__origin');
    },

    files: files,
    paths: paths,
    watcher: watcher
};

function fixPath(path, lower) {
    // sometimes sources of paths return the drive letter in lower case, sometimes upper. Enumerating the cache to find the module is too slow.
    if (path.charAt(1) === ':')
        return (lower ? path.charAt(0).toLowerCase() : path.charAt(0).toUpperCase()) + path.substring(1);
    return path;
}
