module.exports = {
    serialize: function (source) {
        return JSON.stringify(this.extractMetadata(source));
    },
    extractMetadata: function (source) {
        var target = source,
            metadata = {};
        removeObservables();
        return {
            target: target,
            metadata: metadata
        };

        function removeObservables() {
            metadata.observables = [];
            for (var property in target)
                if (target.hasOwnProperty(property) && ko.isObservable(target[property])) {
                    target[property] = target[property]();
                    metadata.observables.push(property);
                }

        }
    },
    deserialize: function (source) {
        source = JSON.parse(source);
        if (source.target)
            return this.applyMetadata(source.target, source.metadata);
        return source;
    },
    applyMetadata: function (target, metadata) {
        if (metadata)
            restoreObservables();
        return target;

        function restoreObservables() {
            var observables = metadata.observables;
            for (var i = 0, l = observables.length; i < l; i++)
                restoreProperty(observables[i]);
        }

        function restoreProperty(property) {
            target[property] = createObservable(target[property]);
        }

        function createObservable(value) {
            return value.constructor === Array ?
                ko.observableArray(value) :
                ko.observable(value);
        }
    }
};
