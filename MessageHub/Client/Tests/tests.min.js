(function(){function u(t){return r.joinChannel("1",{serverEvents:["test"],record:t}),n.subscribe.firstCall.args[1]}var r,n,t,i={test:"message"},f=JSON.stringify(i);module("Client",{setup:function(){mockSignalR(),n=mockPubSub(),t=mockPublisher(),r=new Tribe.MessageHub.Client(n,$.connection.hubImplementation,t)}}),test("acceptServerMessage publishes message to pubsub",function(){$.connection.hubImplementation.client.acceptServerMessage(f),ok(n.publish.calledOnce),ok(n.publish.firstCall.args[0].server),equal(n.publish.firstCall.args[0].test,"message")}),test("joinChannel subscribes to specified messages",function(){var t={serverEvents:["test","test2"]};TMH.initialise(n),TMH.joinChannel("",t),ok(n.subscribe.calledOnce),equal(n.subscribe.firstCall.args[0],t.serverEvents)}),test("joinChannel joins server channel",function(){TMH.initialise(n),TMH.joinChannel("channel",!0),ok($.connection.hubImplementation.server.joinChannel.calledOnce),equal($.connection.hubImplementation.server.joinChannel.args[0],"channel")}),test("joinChannel replays messages when second argument is true",function(){TMH.initialise(n),TMH.joinChannel("channel",!0),ok($.connection.hubImplementation.server.replayChannel.calledOnce),equal($.connection.hubImplementation.server.replayChannel.args[0],"channel")}),test("joinChannel replays messages when option passed",function(){TMH.initialise(n),TMH.joinChannel("channel",{replay:!0}),ok($.connection.hubImplementation.server.replayChannel.calledOnce),equal($.connection.hubImplementation.server.replayChannel.args[0],"channel")}),test("channel publishes specified messages to server",function(){var n=u();n(null,i),ok(t.publishToServer.calledOnce),equal(t.publishToServer.firstCall.args[1],i),equal(t.publishToServer.firstCall.args[2],undefined)}),test("channel sets record option on server envelopes if option is set",function(){var n=u(!0);n(null,i),ok(t.publishToServer.calledOnce),equal(t.publishToServer.firstCall.args[2],!0)}),test("joinChannel and publishToServer calls are queued until connected",function(){var t=$.Deferred();$.connection.hub.start=function(){return t},TMH.initialise(n),TMH.joinChannel("channel"),TMH.publishToServer("channel",{}),ok($.connection.hubImplementation.server.joinChannel.notCalled),ok($.connection.hubImplementation.server.publish.notCalled),t.resolve(),ok($.connection.hubImplementation.server.joinChannel.calledOnce),ok($.connection.hubImplementation.server.publish.calledOnce)})})(),function(){function i(n){$.connection.hubImplementation.connection.state=n;var t=$.connection.hubImplementation.connection.stateChanged.firstCall.args[0];return t({newState:n})}var t,n;module("Publisher",{setup:function(){mockSignalR(),t=mockPubSub(),n=new Tribe.MessageHub.Publisher($.connection.hubImplementation)}}),test("message is not published if not connected",function(){$.connection.hubImplementation.connection.state=0,n.publishToServer("",{}),ok($.connection.hubImplementation.server.publish.notCalled)}),test("queued messages are published when reconnected",function(){$.connection.hubImplementation.connection.state=0,n.publishToServer("",{}),n.publishToServer("",{}),ok($.connection.hubImplementation.server.publish.notCalled),i(1),ok($.connection.hubImplementation.server.publish.calledTwice)}),test("publishToServer ignores server messages",function(){n.publishToServer("",{server:!0}),ok($.connection.hubImplementation.server.publish.notCalled)})}();